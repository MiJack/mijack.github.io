<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mi&amp;Jack</title>
    <description>description</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 09 Feb 2018 23:24:24 +0800</pubDate>
    <lastBuildDate>Fri, 09 Feb 2018 23:24:24 +0800</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>代理模式</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;声明：我已委托「维权骑士」（rightknights.com）为我的文章进行维权行动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;代理模式&quot;&gt;代理模式&lt;/h1&gt;

&lt;p&gt;代理模式是设计模式中一种常见的设计模式，我们往往通过代理模式可以拦截目标方法的执行，进行自己想要的业务需求，例如日志拦截，权限校验等工作。&lt;/p&gt;

&lt;p&gt;代理模式的实现方式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/代理模式类图.png&quot; alt=&quot;代理模式类图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在代理模式中，我们将类分为以下三类角色&lt;/p&gt;

&lt;p&gt;抽象对象Subject，代理对象Proxy，以及真实对象RealSubject。&lt;/p&gt;

&lt;p&gt;当我们想要执行某一个动作时，我们不是直接调用RealSubject的方法，而是通过Proxy间接调用RealSubject的方法。为了使Proxy和RealSubject对外界提供功能保持一致，我们定义了一个接口Subject，表示他们可以提供的业务的能力，Proxy和RealSubject均实现了这一个接口，不同的是RealSubject是真正的业务实现，而Proxy只是简单调用了字段subject对应的函数。&lt;/p&gt;

&lt;h2 id=&quot;代理模式的好处&quot;&gt;代理模式的好处&lt;/h2&gt;

&lt;p&gt;代理模式通过引入代理对象这一角色，在一定程度上隔离了业务发起方和业务实际处理方，避免了两者之间的直接交互，在不更改业务执行流程的前提下，为灵活的需求变化提供了可拓展的编码空间。&lt;/p&gt;

&lt;h1 id=&quot;代理模式的简单实现静态代理&quot;&gt;代理模式的简单实现——静态代理&lt;/h1&gt;

&lt;p&gt;对应的代码如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAction1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAction2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RealSubject&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAction1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;相关的业务事件 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAction2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;相关的业务事件 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAction1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAction1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAction2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAction2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 实际调用&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 创建realObject&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 创建代理对象 Proxy object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ProxySubject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProxySubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 绑定代理对象和real object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 调用Proxy的业务方法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAction1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码就是传说中的静态代理模式。&lt;/p&gt;

&lt;h2 id=&quot;静态代理的弊端&quot;&gt;静态代理的弊端&lt;/h2&gt;

&lt;p&gt;但是，这样的静态代理模式虽然实现起来简单，但是存在着很多弊端：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代理者使用了业务接口，因此需要&lt;strong&gt;实现接口中声明的所有方法&lt;/strong&gt; ：当一个接口中定义了100个甚至更多的方法时，我们需要实现相应数量的方法。如果是好几个接口，那这个工作量可想而知；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;业务逻辑的关注点分散在类中的各个方法中&lt;/strong&gt; ，增加了类功能维护的成本：我们如果想实现一个功能，但方法开始执行时，输出对应的日志信息。如果通过现有实现方式，代理对象的每个方法中我们都要调用对应的日志函数，工作量很大；另外，如果那一天，我们希望改下部分方法的处理逻辑，工作量依旧存在。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;换而言之，静态代理的弊端就在于&lt;strong&gt;代理对象没有对真实对象的动作行为做抽象处理，无形之中增加了程序逻辑修改带来的维护成本&lt;/strong&gt; 。&lt;/p&gt;

&lt;h1 id=&quot;jdk中的动态代理&quot;&gt;JDK中的动态代理&lt;/h1&gt;

&lt;p&gt;为了解决上述问题，我们需要用到JDK中提供的动态代理API。具体API实现如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 生成的字节码由该ClassLoader加载到虚拟器中&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSystemClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 需要代理的接口，是一个数组，可以代理多个对象&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 代理对象的代理的真实对象&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

          &lt;span class=&quot;cm&quot;&gt;/**
           * @param proxy 系统生成的代理对象实例
           * @param method 客户端调用的目标方法的方法对象
           * @param args 客户端调用目标方法时传入的参数
           * @return
           * @throws Throwable
           */&lt;/span&gt;
          &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 调用前的逻辑&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 调用代理对象的相关方法&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 调用后的逻辑&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 返回处理结果&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 调用代理对象的相关方法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAction1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;动态代理的实现原理&quot;&gt;动态代理的实现原理&lt;/h2&gt;

&lt;p&gt;JDK中的动态代理通过&lt;strong&gt;字节码生成&lt;/strong&gt; 技术，产生&lt;strong&gt;目标代理对象&lt;/strong&gt; ，将用户对目标接口的方法调用&lt;strong&gt;统一路由到特定的接口&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.reflect.InvocationHandler&lt;/code&gt; ，将客户端发起的调用转化成一一对应的Method对象，实现了代理动作的&lt;strong&gt;抽象&lt;/strong&gt; ，实现代理的目的。&lt;/p&gt;

&lt;h2 id=&quot;生成的代理类&quot;&gt;生成的代理类&lt;/h2&gt;

&lt;p&gt;通过设置相关的系统属性为true  ，我们可以在磁盘上看到&lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy.newInstance()&lt;/code&gt;方法生成的类的字节码文件。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;例子中生成的代理类如下:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.InvocationHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.UndeclaredThrowableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Proxy0&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$Proxy0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvocationHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UndeclaredThrowableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAction1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UndeclaredThrowableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAction2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UndeclaredThrowableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UndeclaredThrowableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UndeclaredThrowableException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.lang.Object&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;equals&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.lang.Object&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Subject&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doAction1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Subject&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doAction2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.lang.Object&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toString&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.lang.Object&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hashCode&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoSuchMethodException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoSuchMethodError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoClassDefFoundError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生成代理类有以下特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;该类继承于类java.lang.reflect.Proxy，实现了用户传入的interface数组中的所有接口，是一个final类；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果代理的接口均为public的，那么代理类就是public的，对应的包名为com.sun.proxy;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果代理的接口中存在非public接口，那么代理类就是非public的，对应的包名就是非public接口所在的包名;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;方法签名重复：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果代理的接口中存在两个及以上的方法持有相同的方法签名，那么这些方法对应的返回类型也必须保持一致，不然对应的代理类型无法生成。&lt;/li&gt;
      &lt;li&gt;对于方法签名重复的方法，代理类会根据传入的代理接口的顺序将指定目标方法对象为第一个声明该方法签名的接口。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代理对象还代理了常见的hashcode、equals、toString等方法。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;注意事项:&lt;/p&gt;

      &lt;ol&gt;
        &lt;li&gt;也正是因为生成的代理类继承了类Proxy，Java不支持类的多继承，所以我们不能通过相同方式实现针对类的动态代理。&lt;/li&gt;
        &lt;li&gt;方法签名相同是指方法名相同，同时对应位置参数类型也相同，不包含方法的返回类型&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;动态代理和静态代理的区别&quot;&gt;动态代理和静态代理的区别&lt;/h1&gt;

&lt;h2 id=&quot;是否生成新的代码&quot;&gt;是否生成新的代码&lt;/h2&gt;

&lt;p&gt;静态代理和动态代理最大的区别在于是否产生了新的类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;静态代理中所有的类均是由开发人员编写的；&lt;/li&gt;
  &lt;li&gt;动态代理中代理类是系统类Proxy的静态方法&lt;code class=&quot;highlighter-rouge&quot;&gt;newProxyInstance()&lt;/code&gt;完成，用户无需关心代理类的具体实现，只需要关心如何处理&lt;strong&gt;函数调用的逻辑&lt;/strong&gt; ；&lt;/li&gt;
  &lt;li&gt;方法逻辑的统一处理是动态代理的最大优点：
    &lt;ul&gt;
      &lt;li&gt;两者比较发现，对于动态代理方法，代理类对于开发人员而言是透明的，他们不需要关心代理类中对接口的&lt;strong&gt;底层实现&lt;/strong&gt; ，而只需要从方法抽象角度，通过同一个InvocationHandler接口决定每个方法在调用时的具体行为逻辑。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;两者在时序图的差异&quot;&gt;两者在时序图的差异&lt;/h2&gt;

&lt;p&gt;对比静态代理和动态代理的时序图中，我们可以发现静态代理的调用层数明显比动态代理少很多，而且不包含任何反射行为，在一定程度上执行效率要比动态调用高，但是Proxy和RealObject高度耦合到一起，这种实现方式对开放拓展不利。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/静态代理时序图.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，动态代理中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy&lt;/code&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;InvocationHandler&lt;/code&gt;对所有的函数调用请求做了统一处理，将所有请求转化成对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;Method&lt;/code&gt;对象，减少了&lt;code class=&quot;highlighter-rouge&quot;&gt;InvocationHandler&lt;/code&gt;对&lt;code class=&quot;highlighter-rouge&quot;&gt;RealObject&lt;/code&gt;的依赖，在一定程度上得到了解耦的目的，实现了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/动态代理时序图.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;代理那些不能被jdk代理的类&quot;&gt;代理那些不能被JDK代理的类&lt;/h1&gt;

&lt;p&gt;前面我们已经提到由于Proxy生成的新的类继承了类Proxy，而Java不支持类的多继承，所以JDK的动态代理不支持针对类中方法的代理处理。但是，我们可以通过CGLib这个库实现这些类的代理。&lt;/p&gt;

&lt;p&gt;例如，我们有一个类StudentService：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们想要代理这个类，在save执行前输出user对象，执行后输出存在完成的提示时，通过CGLib的具体实现代码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 获取一个Enhancer对象，以生成新的字节码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Enhancer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 设置目标类的父类&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSuperclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 设置目标函数的回调函数Callback对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CglibProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 创建子类并生成对应的代理对象实例&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 调用目标函数&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中CGLibProxy的实现如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CglibProxy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodProxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invokeSuper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;打印结束&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cglib中的那些callback&quot;&gt;CGlib中的那些callback&lt;/h2&gt;

&lt;p&gt;CGLib提供了很多Callback实现，MethodInterceptor只是其中的一个实现，其他的还有&lt;code class=&quot;highlighter-rouge&quot;&gt;NoOp&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyLoader&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Dispatcher&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;InvocationHandler&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;FixedValue&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ProxyRefDispatcher&lt;/code&gt;。他们的具体含义如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MethodInterceptor：全权代理所有方法的调用执行。&lt;/li&gt;
  &lt;li&gt;NoOp：无额外逻辑，把方法调用直接委派到父类中的实现。&lt;/li&gt;
  &lt;li&gt;LazyLoader：被代理的对象需要懒加载&lt;/li&gt;
  &lt;li&gt;Dispatcher：将方法调用转发到特定的对象的方法上&lt;/li&gt;
  &lt;li&gt;InvocationHandler：JDK中InvocationHandler在GCLib的实现，可以代理类中的方法&lt;/li&gt;
  &lt;li&gt;FixedValue：对于特定方法，强制返回特定的值，常和CallbackFilter结合使用&lt;/li&gt;
  &lt;li&gt;ProxyRefDispatcher：和Dispatcher作用相同，不同的是ProxyRefDispatcher可以找到代理对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;callbackfilter&quot;&gt;CallbackFilter&lt;/h2&gt;

&lt;p&gt;在上面例子里，我们采用了是MethodIntercepter，实际上，Enhancer支持多个Callback，我们可以通过CallbackFilter指派每一个方法的代理模式采用哪一种Callback。当然，这种指定关系是&lt;strong&gt;生成的字节码&lt;/strong&gt;中方法的代理模式，是一种静态关系绑定，不是动态的。&lt;/p&gt;

&lt;p&gt;具体代理实现如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 获取一个Enhancer对象，以生成新的字节码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Enhancer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 设置目标类的父类&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSuperclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CglibProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 设置目标函数的回调函数Callback对象数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 指定代理类需要用到的所有的Callback，是一个数组&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 设置CallbackFilter&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCallbackFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CallbackFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 根据特定的方法返回对应的代理位置&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 对应的Callback数组的第1位&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 对应的Callback数组的第0位&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/shijiaqi1066/p/3429691.html&quot;&gt;CGLib学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 08 Jan 2018 04:30:28 +0800</pubDate>
        <link>http://localhost:4000/2018/01/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
        
        <category>设计模式</category>
        
        <category>代理模式</category>
        
        <category>CGLib</category>
        
        
      </item>
    
      <item>
        <title>二叉树的遍历算法</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;声明：我已委托「维权骑士」（rightknights.com）为我的文章进行维权行动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;二叉树的遍历算法&quot;&gt;二叉树的遍历算法&lt;/h1&gt;

&lt;p&gt;二叉树遍历算法是面试过程中的常见考题，面试官常常要求应聘者写成树的三种遍历（前序、中序、后序）算法，当然要完成这个任务非常简单，每一种遍历方式的代码不超过10行。假设树中节点的结构如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;树的递归遍历算法&quot;&gt;树的递归遍历算法&lt;/h1&gt;
&lt;p&gt;树的前序遍历&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;preOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;树的中序遍历&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;树的后序遍历&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;整体上，三者的基本结构是一样的，只是输出的位置发生了变化。&lt;/p&gt;

&lt;p&gt;考虑到递归调用有的时候会出现Stack Overflow的问题，为此，我们还需要会写非递归调用的树的三种遍历。具体的实现形式可以基于Stack实现。&lt;/p&gt;
&lt;h1 id=&quot;基于stack-的实现方法&quot;&gt;基于Stack 的实现方法&lt;/h1&gt;
&lt;h2 id=&quot;前序遍历&quot;&gt;前序遍历&lt;/h2&gt;
&lt;p&gt;三种遍历算法中，树的前序遍历最为简单，因为他不存在状态回溯。&lt;/p&gt;

&lt;p&gt;基本实现的思路如下：首先我们先将根节点压入到Stack中，然后进入一个循环：从Stack顶部取一个节点，输出这个节点，再将节点的左右非空子节点（ &lt;strong&gt;按照先右节点再左节点的顺序&lt;/strong&gt; ）放入到Stack，直至Stack中为空，结束循环，遍历结束。
代码实现如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preOrderWithStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;中序遍历&quot;&gt;中序遍历&lt;/h2&gt;

&lt;h3 id=&quot;一种简单的情况&quot;&gt;一种简单的情况&lt;/h3&gt;

&lt;p&gt;在编写中序遍历的代码之前，我们先来看看一种情况，也就是“丿”撇字型的数，所有的节点的右子树均为null。在这种情况下，我们可以先将这个撇要入到栈中，然后一边pop一边输出，得到结果就是我们想要的中序遍历。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/特殊的二叉树.png&quot; alt=&quot;撇字形的树&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体代码比较简单，如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrderWithStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ①查找root树的最小元素&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ②依次弹出栈中的元素&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然这个还离我们的想要的二叉树的中序遍历有一些距离。&lt;/p&gt;

&lt;p&gt;从结构上，撇字形的树和二叉树的区别在于二叉树可能存在右子树，为此，当我们将一个节点输出后，我们还没有进行树的右子树的遍历，为此我们需要这个节点的右子树进行中序遍历，&lt;/p&gt;

&lt;p&gt;也就是当我们输出一个节点node后，要需要对这个节点的右子树进行检查，&lt;strong&gt;如果它不为空，那么我们需要对它进行中序遍历，回到上面一段代码中的①处，不同的是此时的root变成了node&lt;/strong&gt;。为此，我们可以代码进行调整得到我们需要的中序遍历。&lt;/p&gt;

&lt;h3 id=&quot;最终的代码实现&quot;&gt;最终的代码实现&lt;/h3&gt;

&lt;p&gt;具体代码如下&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrderWithStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//①查找root树的最小元素&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ②弹出栈顶元素，并输出&lt;/span&gt;
   	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ③node指向右子树&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;后序遍历&quot;&gt;后序遍历&lt;/h2&gt;

&lt;p&gt;相比前面这个遍历方式，后序遍历的实现需要一定的技巧&lt;/p&gt;

&lt;h3 id=&quot;比较简单的方法&quot;&gt;比较简单的方法&lt;/h3&gt;

&lt;p&gt;对于一个树的后序遍历， 顺序如下：左子树 - 右子树 - 当前节点，我们可以看着 当前节点 - 右子树 - 左子树的逆序，这样我们就可以采用的类似前序遍历的方法，再将得到的中间结果进行逆序，输出即可，中间结果可以储存在Stack中或者ArrayList中，具体实现如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postOrderWithStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;另一种实现方式&quot;&gt;另一种实现方式&lt;/h3&gt;

&lt;p&gt;上面中方式巧妙借助了前序遍历解决了问题，现在我们采用另一种方式解决这个问题。&lt;/p&gt;

&lt;p&gt;我们还是先考虑刚才的那一种特殊情况，对于&lt;strong&gt;撇字形&lt;/strong&gt; 的树，他的后序遍历就比较简单了，具体如下&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postOrderWithStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;和中序遍历类似，我们&lt;strong&gt;缺少对节点右子树的检查&lt;/strong&gt; 。不同的是，中序遍历是&lt;strong&gt;先输出再检查右子树&lt;/strong&gt; ，这里我们需要&lt;strong&gt;先检查左子树，再输出节点&lt;/strong&gt; ：当我们检查栈顶元素时，如果之前输出的节点是栈顶元素的左子树，这意味着当前节点的左子树输出完毕，需要进行右子树的后序遍历；如果当前输出节点是栈顶元素的右子树，则当前节点的右子树输出完毕，直接pop，输出当前节点。
具体代码实现如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 右子树为空或者右子树已经输出&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 防止重新进入循环&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Dec 2017 23:55:28 +0800</pubDate>
        <link>http://localhost:4000/2017/12/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</guid>
        
        <category>算法</category>
        
        <category>二叉树</category>
        
        
      </item>
    
      <item>
        <title>ExoPlayer探营</title>
        <description>&lt;h1 id=&quot;1什么是exoplayer&quot;&gt;1.什么是ExoPlayer&lt;/h1&gt;

&lt;p&gt;ExoPlayer是谷歌官方主导基于低层媒体API（如&lt;a href=&quot;https://developer.android.com/reference/android/media/MediaCodec.html&quot;&gt;MediaCodec&lt;/a&gt;，&lt;a href=&quot;https://developer.android.com/reference/android/media/AudioTrack.html&quot;&gt;AudioTrack&lt;/a&gt;，&lt;a href=&quot;https://developer.android.com/reference/android/media/MediaDrm.html&quot;&gt;MediaDrm&lt;/a&gt;）开发的Android媒体播放库，整体上的特点如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;高度的可定制性，开发者可以根据实际需求对其进行修改&lt;/li&gt;
  &lt;li&gt;提供一系列MediaPlayer不提供的特性，例如，支持动态的自适应流HTTP(DASH) 和平滑流&lt;/li&gt;
  &lt;li&gt;独立于Android系统，可以构建系统版本自主升级&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ExoPlayer各功能对系统版本的要求如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Use case&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Android version number&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Android API level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Audio playback&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Video playback&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DASH (no DRM)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DASH (Widevine CENC; “cenc” scheme)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.4&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SmoothStreaming (no DRM)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SmoothStreaming (PlayReady SL2000)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;AndroidTV&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;AndroidTV&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HLS (no DRM)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HLS (AES-128 encryption)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;相关的网站如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目官网：http://google.github.io/ExoPlayer/&lt;/li&gt;
  &lt;li&gt;开发指南：http://google.github.io/ExoPlayer/guide.html&lt;/li&gt;
  &lt;li&gt;Github地址：https://github.com/google/ExoPlayer&lt;/li&gt;
  &lt;li&gt;Medium博客：https://medium.com/google-exoplayer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;框架简介&quot;&gt;框架简介&lt;/h2&gt;
&lt;p&gt;接口&lt;code class=&quot;highlighter-rouge&quot;&gt;ExoPlayer&lt;/code&gt;是ExoPlayer的核心，提供了一些我们平时可能会用到的功能，如缓冲、暂停、播放或者快进快退。ExoPlayer通过控制组件实现了媒体的识别、加载和渲染。这些组件如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MediaSource&lt;/strong&gt;:是对播放对象的抽象，由于播放对象可能存在于内存、磁盘甚至网络中，MediaSource还需要提供对应的读取方式。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Renderer&lt;/strong&gt;:负责Media的渲染工作&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TrackSelecter&lt;/strong&gt;: 选择MediaSource中的轨道（Track）交由TrackRenderer负责渲染,这里包括音频轨道和视频轨道。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LoadControl&lt;/strong&gt;:  负责媒体的加载，如何时进行加载以及加载的多少&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上四个组件，MediaSource需要在播放媒体前传入ExoPlayer，而后三者则需要在创建ExoPlayer时制定。&lt;/p&gt;

&lt;h1 id=&quot;2exoplayer-的hello-world&quot;&gt;2.ExoPlayer 的Hello World&lt;/h1&gt;

&lt;p&gt;使用ExoPlayer在音频和视频的播放上没有太大区别，这里我们以视频播放为例，介绍一下如何使用ExoPlayer 播放视频，可以分为以下几步：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将ExoPlayer添加到项目依赖中&lt;/li&gt;
  &lt;li&gt;创建SimpleExoPlayer实例&lt;/li&gt;
  &lt;li&gt;将player关联到到View上&lt;/li&gt;
  &lt;li&gt;创建MediaSource并使player处于prepare状态&lt;/li&gt;
  &lt;li&gt;释放资源&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1将exoplayer添加到项目依赖中&quot;&gt;&lt;strong&gt;1.将ExoPlayer添加到项目依赖中&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;ExoPlayer发布在Jcenter上，所以需要在项目根目录的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gralde&lt;/code&gt;文件中添加如下代码：&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ExoPlayer对应的gradle地址如下：&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.android.exoplayer:exoplayer:r2.X.X'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2创建一个simpleexoplayer实例&quot;&gt;&lt;strong&gt;2.创建一个SimpleExoPlayer实例&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;这里我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt; ExoPlayerFactory.newSimpleInstance(Context, TrackSelector, LoadControl)&lt;/code&gt;创建对应的ExoPlayer实例对象。
相关代码如下：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1. Create a default TrackSelector&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BandwidthMeter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bandwidthMeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultBandwidthMeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TrackSelection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoTrackSelectionFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdaptiveVideoTrackSelection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bandwidthMeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TrackSelector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackSelector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTrackSelector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoTrackSelectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2. Create a default LoadControl&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LoadControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadControl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultLoadControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 3. Create the player&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SimpleExoPlayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ExoPlayerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newSimpleInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackSelector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3将player关联到到view上&quot;&gt;&lt;strong&gt;3.将player关联到到View上&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;ExoPlayer默认提供了一个实现&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleExoPlayerView&lt;/code&gt;,它包括&lt;code class=&quot;highlighter-rouge&quot;&gt;PlaybackControlView&lt;/code&gt;和用于视频渲染的&lt;code class=&quot;highlighter-rouge&quot;&gt;Surface&lt;/code&gt;，通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleExoPlayerView.setPlayer(SimpleExoPlayer)&lt;/code&gt;，就可以将SimpleExoPlayerView和Player进行绑定。
当然你可以对以上行为进行自定义，例如将PlaybackControlView作为单独的组件或者实现一个属于你自己的PlaybackControlView。&lt;/p&gt;

&lt;h2 id=&quot;4准备player&quot;&gt;&lt;strong&gt;4.准备player&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在ExoPlayer中，一个媒体片段用MediaSource表示，如果要播放一个片段，需要创建对应的MediaSource（ExoPlayer提供的实现有DashMediaSource、SsMediaSource、HlsMediaSource、ExtractorMediaSource）。如果我们需要播放一段mp4的视频，代码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Measures bandwidth during playback. Can be null if not required.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DefaultBandwidthMeter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bandwidthMeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultBandwidthMeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Produces DataSource instances through which media data is loaded.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSourceFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultDataSourceFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserAgent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;yourApplicationName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bandwidthMeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Produces Extractor instances for parsing the media data.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ExtractorsFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractorsFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultExtractorsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is the MediaSource representing the media to be played.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtractorMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mp4VideoUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataSourceFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractorsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Prepare the player with the source.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当ExoPlayer准备就绪后，我们可以通过player控制视频的播放、前进或后退。&lt;/p&gt;
&lt;h2 id=&quot;5释放资源&quot;&gt;&lt;strong&gt;5.释放资源&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当你不需要player时，可以通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;ExoPlayer.release&lt;/code&gt;来释放资源。&lt;/p&gt;

&lt;h1 id=&quot;3mediasource&quot;&gt;3.MediaSource&lt;/h1&gt;

&lt;p&gt;之前已经提到过了，ExoPlayer中一个media片段用&lt;code class=&quot;highlighter-rouge&quot;&gt;MediaSource&lt;/code&gt;表示。除了之前提到过的&lt;code class=&quot;highlighter-rouge&quot;&gt;MediaSource&lt;/code&gt;，ExoPlayer中还提供了MergingMediaSource, LoopingMediaSource 和 ConcatenatingMediaSource等MediaSource，通过他们之间的相互组合，我们可以得到各种各样的播放效果&lt;/p&gt;
&lt;h2 id=&quot;合并视频和字幕&quot;&gt;合并视频和字幕&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtractorMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSourceFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractorsFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTextSampleFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MimeTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_TTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NO_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NO_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subtitleSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingleSampleMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtitleUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSourceFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TIME_UNSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MergingMediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergedSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MergingMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subtitleSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;循环播放视频&quot;&gt;循环播放视频&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtractorMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Loops the video indefinitely.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LoopingMediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoopingMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Plays the video twice.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LoopingMediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoopingMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;连续播放视频&quot;&gt;连续播放视频&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtractorMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstVideoUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtractorMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondVideoUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Plays the first video, then the second video.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ConcatenatingMediaSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concatenatedSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcatenatingMediaSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4事件监听&quot;&gt;4.事件监听&lt;/h1&gt;
&lt;p&gt;在platback的过程中，应用可以可以根据ExoPlayer的状态做出相应的调整，对播放过程进行控制。为此，ExoPlayer提供了两个不同方式&lt;/p&gt;

&lt;h2 id=&quot;事件回调high-level-event&quot;&gt;事件回调（High Level Event）&lt;/h2&gt;
&lt;p&gt;ExoPlayer提供了一个ExoPlay.EventListener这一接口，通过addListener和removeListener可以添加和删除相关接口。这个接口可以监听player状态的更改，提供的方法如下。除此以外，SimpleExoPlayer提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;setVideoListener &lt;/code&gt;负责接收与视频渲染有关的事件，&lt;code class=&quot;highlighter-rouge&quot;&gt;setVideoDebugListener&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;setAudioDebugListener&lt;/code&gt;用于调试信息。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExoPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Called when the timeline and/or manifest has been refreshed.
     * &amp;lt;p&amp;gt;
     * Note that if the timeline has changed then a position discontinuity may also have occurred.
     * For example the current period index may have changed as a result of periods being added or
     * removed from the timeline. The will &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; be reported via a separate call to
     * {@link #onPositionDiscontinuity()}.
     *
     * @param timeline The latest timeline. Never null, but may be empty.
     * @param manifest The latest manifest. May be null.
     */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTimelineChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timeline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Called when the available or selected tracks change.
     *
     * @param trackGroups The available tracks. Never null, but may be of length zero.
     * @param trackSelections The track selections for each {@link Renderer}. Never null and always
     *     of length {@link #getRendererCount()}, but may contain null elements.
     */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTracksChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrackGroupArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackGroups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrackSelectionArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackSelections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Called when the player starts or stops loading the source.
     *
     * @param isLoading Whether the source is currently being loaded.
     */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoadingChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Called when the value returned from either {@link #getPlayWhenReady()} or
     * {@link #getPlaybackState()} changes.
     *
     * @param playWhenReady Whether playback will proceed when ready.
     * @param playbackState One of the {@code STATE} constants defined in the {@link ExoPlayer}
     *     interface.
     */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPlayerStateChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playWhenReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playbackState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Called when an error occurs. The playback state will transition to {@link #STATE_IDLE}
     * immediately after this method is called. The player instance can still be used, and
     * {@link #release()} must still be called on the player should it no longer be required.
     *
     * @param error The error.
     */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPlayerError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExoPlaybackException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Called when a position discontinuity occurs without a change to the timeline. A position
     * discontinuity occurs when the current window or period index changes (as a result of playback
     * transitioning from one period in the timeline to the next), or when the playback position
     * jumps within the period currently being played (as a result of a seek being performed, or
     * when the source introduces a discontinuity internally).
     * &amp;lt;p&amp;gt;
     * When a position discontinuity occurs as a result of a change to the timeline this method is
     * &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; called. {@link #onTimelineChanged(Timeline, Object)} is called in this case.
     */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPositionDiscontinuity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;handlerlow-level-event&quot;&gt;Handler(Low Level Event)&lt;/h2&gt;
&lt;p&gt;通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;ExoPlayer.void sendMessages(ExoPlayerMessage... )&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ExoPlayer.void blockingSendMessages(ExoPlayerMessage... messages)&lt;/code&gt;实现和ExoPlayer交互，再由内部的Handler进行消息的分发和处理。其实，在具体实现上，回调是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Handler.handleMessage(Message)&lt;/code&gt;实现的，两者在实现上是一样的。&lt;/p&gt;

&lt;h1 id=&quot;5使用stetho对exoplayer进行网络调试&quot;&gt;5.使用Stetho对ExoPlayer进行网络调试&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/stetho/&quot;&gt;Stetho&lt;/a&gt;是FaceBook出品的Android调试利器，在它的配合下，可以使用Chrome进行调试。当然，ExoPlayer也支持Stetho调试，开启方式如下：&lt;/p&gt;

&lt;h2 id=&quot;1实现添加相关库依赖&quot;&gt;&lt;strong&gt;1.实现添加相关库依赖&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;由于ExoPlayer的数据读取是由接口&lt;code class=&quot;highlighter-rouge&quot;&gt;com.google.android.exoplayer2.upstream.DataSource&lt;/code&gt;实现的，这里的我们采用的类是&lt;code class=&quot;highlighter-rouge&quot;&gt;com.google.android.exoplayer2.ext.okhttp.OkHttpDataSourceFactory&lt;/code&gt;，所以需要添加如下依赖&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.android.exoplayer:extension-okhttp:r2.1.1'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.squareup.okhttp3:okhttp:3.5.0'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.facebook.stetho:stetho:1.4.2'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.facebook.stetho:stetho-okhttp3:1.4.2'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;2网络和stetho的初始化&quot;&gt;&lt;strong&gt;2.网络和Stetho的初始化&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Stetho.initializeWithDefaults(Context)&lt;/code&gt;完成Stetho的初始化。
创建OkHttpClient，并添加StethoInterceptor到NetworkInterceptor&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Stetho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initializeWithDefaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;OkHttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okHttpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addNetworkInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StethoInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;3创建okhttpdatasource&quot;&gt;&lt;strong&gt;3.创建OkHttpDataSource&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSourceFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OkHttpDataSourceFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;okHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bandwidthMeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;4查看调试结果&quot;&gt;&lt;strong&gt;4.查看调试结果&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;chrome://inspect&lt;/code&gt;，我们就可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;Developer Tools&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Network&lt;/code&gt;部分查看到相关的调试结果:
&lt;img src=&quot;http://ohy7r8bgu.bkt.clouddn.com/debug-exoplayer-using-stetho.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 23:55:28 +0800</pubDate>
        <link>http://localhost:4000/2017/01/12/ExoPlayer%E6%8E%A2%E8%90%A5/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/12/ExoPlayer%E6%8E%A2%E8%90%A5/</guid>
        
        <category>ExoPlayer</category>
        
        <category>Android</category>
        
        <category>视频播放</category>
        
        
      </item>
    
      <item>
        <title>小试RxJava原理</title>
        <description>&lt;p&gt;RxJava的Hello World
在开始介绍RxJava的源码之前，我们先来写一个RxJava的Hello world吧！&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onCompleted&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是我们熟悉的RxJava链式调用，在源码分析上比较麻烦，无法很明确的声明每一个代码块的含义。在这里，我们采用非链式调用的方式对这个Hello world进行重构（我们采用lambda 表达式）。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//创建OnSubscribe，在call()中对应数据源产生形式&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSubscribe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//创建Subscriber，定义针对数据流的响应&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onCompleted&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//根据OnSubscribe创建Observable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//创建observable、subscriber的注册关系&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;hello-world的简单分析&quot;&gt;Hello World的简单分析&lt;/h1&gt;

&lt;p&gt;简单的说，RxJava的原理就是观察者模式，不过RxJava比观察者模式强大多了。在RxJava，Observable相当于被观察者，它是事件的源头，而OnSubscribe则是定义数据源如何发送事件，或者如何发送什么样的数据；Subscriber则是观察者（在代码实现上，Subscriber实现了接口Observer），定义了接收数据后对应的反应。observable.subscribe(subscriber)将两者进行了关联：即告诉Observable，它有一个Subscriber；同时触发OnSubscribe.onCall()，开启整个事件流。
如下图,明显问题的关键就在于observable.subscribe(subscriber)。&lt;/p&gt;

&lt;h2 id=&quot;observablesubscribesubscriber&quot;&gt;observable.subscribe(subscriber)&lt;/h2&gt;
&lt;p&gt;接下来，我们对observable.subscribe(subscriber)进行分析,对应的代码在Observable.java中。&lt;/p&gt;

&lt;p&gt;注：如果没有特殊说明，我们使用的RxJava的版本为1.2.2&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//检查subscriber、observable.onSubscribe是否为空&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subscriber can not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onSubscribe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onSubscribe function can not be null.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//调用subscriber的onStart()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//将subscriber封装成SafeSubscriber&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SafeSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SafeSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//通过RxJavaHook对observable, observable.onSubscribe进行封装，同时调用Observable.OnSubscribe类的call(Subscriber)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RxJavaHooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onObservableStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//通过RxJavaHook对subscriber进行封装，并返回结果&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxJavaHooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onObservableReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//判断异常，必要时抛出&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Exceptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;throwIfFatal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//当Subscriber不再订阅时，有RxJavaHook负责处理&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isUnsubscribed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RxJavaHooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RxJavaHooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onObservableError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// if an unhandled error occurs executing the onSubscribe we will propagate it&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RxJavaHooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onObservableError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//判断异常，必要时抛出&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Exceptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;throwIfFatal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//封装异常并抛出&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnErrorFailedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error occurred attempting to subscribe [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;] and then again while trying to pass to onError.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;RxJavaHooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onObservableError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//取消订阅&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unsubscribed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;核心的代码就是RxJavaHooks.onObservableStart(observable, observable.onSubscribe).call(subscriber)简化成observable.onSubscribe.call(subscriber)。这才是关键。这里的subscriber其实对应于我们编写的Subscriber。那么，很明显,Hello world的调用关系如下，看上去是不是很简单。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;你写的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;你写的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;你写的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;你写的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说的再直白一点，为什么RxJava可以完成调用–响应呢？还记得你在Hello World里定义的Observable.OnSubscribe吗？看看它的onCall方法的参数的类型是不是和你定义的观察者Subscriber是同一个类型，都是rx.Subscriber。懂了吧！简单的理解，因为你在call(subscriber)中调用subscribe.onNext(1),所以你写的subscriber的onNext(Integer)方法会被调用。所以，你认为将你写的 subscriber变成了Observable.OnSubscribe里方法call(Subscriber)的一个参数.也只是因为你调用了observable.subscribe(subscriber),才有了后面onNext()、onCompleted()、onError()的一系列方法调用&lt;/p&gt;

&lt;h1 id=&quot;map&quot;&gt;map&lt;/h1&gt;
&lt;p&gt;在解释完RxJava的Hello world，下面我们分析一下map，实例代码（非链式调用）如下：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSubscribe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Integer &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//分析重点&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapObservable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mapObservable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要了解为什么map可以实现链式调用，那么我们需要深入到源码那一层进行分析。不过在此之前，我们可以想一下如果是我们进行开发，那么应该如何开发。这里提供一个实现思路：在这里，mapObservable其实承担着双重责任，它既是 observable对应的Subscriber(注册者)，也是subscriber的Observable(观察对象)。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MapSubscriber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapSubscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapObservable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)-&amp;gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*doSomething*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mapObservable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看源码，我们发现RxJava的具体实现如下：&lt;/p&gt;

&lt;p&gt;Observable.java&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnSubscribeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RxJavaHooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OnSubscribeMap.java&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnSubscribeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnSubscribeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MapSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unsafeSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MapSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MapSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Exceptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;throwIfFatal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnErrorThrowable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addValueAsLastCause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;RxJavaHooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Producer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/14/%E5%B0%8F%E8%AF%95RxJava%E5%8E%9F%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/14/%E5%B0%8F%E8%AF%95RxJava%E5%8E%9F%E7%90%86/</guid>
        
        <category>RxJava</category>
        
        <category>源码分享</category>
        
        
      </item>
    
      <item>
        <title>Android上的网络响应日志技巧</title>
        <description>&lt;p&gt;在开发Android应用程序的过程中，你或许需要从远处服务器中加载数据。而在开发过程中，你可能要经常查看应用从网络中获取到的数据的内容。&lt;/p&gt;

&lt;p&gt;如果你最近几年在开发Android应用，或许你使用过（或者听说过）&lt;a href=&quot;https://github.com/square/retrofit&quot;&gt;Retrofit&lt;/a&gt;来处理网络请求。如果没有，我建议你了解一下，因为他实在太棒了。&lt;/p&gt;

&lt;p&gt;所以，使用Retrofit时，在监听网络请求方面，你有哪些选择呢？&lt;/p&gt;

&lt;h2 id=&quot;retrofit--okhttp的logging&quot;&gt;Retrofit / OkHttp的logging&lt;/h2&gt;

&lt;p&gt;Retrofit 和 OkHttp 有一些内置的记录HTTP响应的方法。使用这些功能的方法取决于你使用的Retrofit的具体版本。&lt;/p&gt;

&lt;h2 id=&quot;retrofit-1x&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Retrofit 1.x&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;如果你使用的是比较老的Retrofit 1.x版本。在创建RestAdapter时，你可以通过在RestAdapter.Buidler中设置LogLevel的属性直接开启响应日志这一功能。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LogLevel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEndpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setErrorHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLogLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LegLevel是一个表示日志细节的枚举类型，值有NONE, BASIC, HEADERS, HEADERS_AND_ARGS 和 FULL。你可以根据需要打印的每一个网络请求的内容设置对应的值。&lt;/p&gt;

&lt;h2 id=&quot;retrofit-2x&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Retrofit 2.x&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/JakeWharton/status/708401516063891456&quot;&gt;Retrofit 2.0的稳定版&lt;/a&gt;在16年三月上旬已经发布，变化很大。如果你还没有升级它,我建议你​​升级吧：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://medium.com/p/ab7a11bc17df&quot;&gt;Retrofit 2.0与RxJava混合使用的快速入门&lt;/a&gt;
您可能已经注意到Retrofit 2.0最终版本已经出来了，所以，还等什么，现在去升级吧！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你升级以后，会发现Retrofit发生了很多变化。比如，你无法直接通过类Retrofit.Builder设置Log Level.&lt;/p&gt;

&lt;p&gt;Retrofit 2.x直接依赖于Square的另一个库（OkHttp3）进行HTTP的实际网络调用。与此不同的是，Retrofit 以前的版本(1.x)并没有直接依赖于OkHttp，因而你可以使用不同的HTTP客户端，只要它们实施了Retrofit的客户端接口。&lt;/p&gt;

&lt;p&gt;因此，&lt;strong&gt;日志功能已经从Retrofit更改到OkHttp中去了&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;现在，您可以调用OkHttp的拦截器 [HttpLoggingInterceptor]（https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor）实现和Retrofit 1.x一样的日志功能。&lt;/p&gt;

&lt;p&gt;如果要使用它，您必须先在Gradle中声明，因为它以独立的形式进行分发：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile 'com.squareup.okhttp3:logging-interceptor:&amp;lt;latest&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后将日志记录拦截器添加到OkHttp中：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Level logLevel = Level.BODY;
HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();
interceptor.setLevel(logLevel);
new OkHttpClient.Builder()
        .addInterceptor(interceptor)
        .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;##’日志的输出效果是什么样子？`&lt;/p&gt;

&lt;p&gt;网络响应的body以纯文本的形式出现在Logcat中。日志通常被分隔成了若干行，往往难以阅读：
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*OXQRErwU5UW-2IiiK56U8Q.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Retrofit 1.x / HttpLoggingInterceptor logcat output&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通常,你需要拷贝整行的响应，然后再取出开头的时间戳，包名称以及标记。如果你遇到的JSON响应，您可以使用像[JsonFormatter]（https://jsonformatter.curiousconcept.com/）或[在线JSON查看器（http://jsonviewer.stack.hu/），提高复制的文本可读性。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于我来说，每次检查网络请求的过程都十分繁琐、耗时。这就是我决定创建自己的拦截器的原因——这可以简化流程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;oklog---检查响应的快捷之道&quot;&gt;OkLog - 检查响应的快捷之道&lt;/h2&gt;

&lt;p&gt;[OkLog]（https://github.com/simonpercic/OkLog）是针对OkHttp 网络响应的日志记录拦截器，可以在开发过程中简化了网络响应的调试。&lt;/p&gt;

&lt;p&gt;OKLog有两个独立的库，取决于OkHttp的版本：OkLog对应于OkHttp，OkLog3对应于OkHttp3。&lt;/p&gt;

&lt;p&gt;OkLog写了一个可访问的URL，可将网络响应作为URL路径的一部分进行日志记录。&lt;/p&gt;

&lt;p&gt;这样一来，您就可以点击Android Studio中的日志显示一个链接，你在浏览器中查看这个响应对应文本：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*o7CdnntHqZ0zqHYXOBKNfQ.gif&quot; alt=&quot;&quot; /&gt;
OkLog 使用示例&lt;/p&gt;

&lt;p&gt;另一个好处是能够与其他开发者（通常是REST API的开发人员）分享这些URL。&lt;/p&gt;
&lt;h2 id=&quot;它是如何运作的&quot;&gt;它是如何运作的？&lt;/h2&gt;

&lt;p&gt;OkLog通过实现自己的[“应用程序”interceptor]（https://github.com/square/okhttp/wiki/Interceptors）截获OkHttp的纯网络响应。&lt;/p&gt;

&lt;p&gt;在得到响应的纯文本之后，将它转换对url友好的字符串，生成包含响应的URL。&lt;/p&gt;

&lt;p&gt;然后，该URL作为日志打印出来。OkLog可以选择依赖于Timber，只有你的项目依赖于它时，它才发挥作用。否则，它将调用Android内置的Log方法进行日志记录（当然，你也可以强制它使用内置Log方法）。如果你愿意的话，甚至可以定制&lt;a href=&quot;https://github.com/simonpercic/OkLog/blob/master/core/src/main/java/com/github/simonpercic/oklog/core/LogInterceptor.java&quot;&gt;LogInterceptor&lt;/a&gt;自定义日志记录。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那么，究竟响应需要如何转化呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;纯文本响应首先要经过[gzip压缩]（https://en.wikipedia.org/wiki/Gzip），以使该字符串尽可能短。然后，将所得的字符串进行[Base64]（https://en.wikipedia.org/wiki/Base64）编码，从而可以 以使其网址友好。&lt;/p&gt;

&lt;p&gt;#点击URL时会发生什么？&lt;/p&gt;

&lt;p&gt;默认情况下，生成的URL指向一个Spring Web应用程序的托管实例，称为[ResponseEcho]（https://github.com/simonpercic/ResponseEcho）。该应用程序的工作，刚好和OKLog相反，对URL路径字符串参数进行Base64解码和对参数进行gzip解压，并将其作为一个普通的响应返回。&lt;/p&gt;

&lt;p&gt;如果普通的响应恰好是一个JSON，Web应用程序应该返回格式规整的JSON，这样更容易阅读。&lt;/p&gt;

&lt;p&gt;如果你愿意，你也可以自己搭建web应用程序，并设置OkLog匹配主机名网站的前缀。&lt;/p&gt;

&lt;h2 id=&quot;如何使用它&quot;&gt;如何使用它？&lt;/h2&gt;

&lt;p&gt;关于使用的具体流程请查看Github上的&lt;a href=&quot;https://github.com/simonpercic/OkLog#usage&quot;&gt;Readme&lt;/a&gt;，基本步骤如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先添加当前的OKLog的版本.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// pre-OkHttp3
compile 'com.github.simonpercic:oklog:&amp;lt;latest&amp;gt;'
// OkHttp3
compile 'com.github.simonpercic:oklog3:&amp;lt;latest&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用 OkLogInterceptor的builder()方法构造一个实例
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OkLogInterceptor interceptor = OkLogInterceptor.builder()
      // set desired custom options
      .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在OKHttp的 interceptors中添加一个 okLogInterceptor实例
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// for pre-OkHttp3
List&amp;lt;Interceptor&amp;gt; clientInterceptors = okHttpClient.interceptors();
Collections.addAll(clientInterceptors, okLogInterceptor);
// for OkHttp3
new OkHttpClient.Builder().addInterceptor(okLogInterceptor).build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;通常，你可以通过 okHttpClient 实例来构造 Retrofit/2 实例。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;已知的限制&quot;&gt;已知的限制&lt;/h2&gt;
&lt;p&gt;OKLog是通过Android的Logging系统实现日志功能的，但Logging有&lt;a href=&quot;http://stackoverflow.com/a/8899735&quot;&gt;约4000字符的长度限制&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;即使生成的url通过gzip压缩和Base64编码，最后在一些网络响应中，他们仍可能 &lt;strong&gt;超出日志的行限制&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;不幸的是，目前还没有针对性的解决方案。不过，大多数情况下，一切都是正常的。&lt;/p&gt;

&lt;p&gt;在升级的实际记录过程中，OkLog可以选择[Timber]（https://github.com/JakeWharton/timber），Timber可以对一些过长的日志进行切片分割，所以你还可以看到那些超过长度限制的响应。如果，它被分割成若干行，你可以把它们链接起来从而得到完整的url。&lt;/p&gt;

&lt;p&gt;这样会将太长线，所以你可以看到，如果一个反应是超过长度限制。如果它被分成多行，可以手动串接所有行，以获得有效的URL。&lt;/p&gt;

&lt;h2 id=&quot;另一种实现方式---facebook的stetho&quot;&gt;另一种实现方式 - Facebook的Stetho&lt;/h2&gt;

&lt;p&gt;和上述方案不同的是，&lt;a href=&quot;http://facebook.github.io/stetho/&quot;&gt;Facebook’s Stetho&lt;/a&gt; 使用的是另一种方案来记录网络请求。&lt;/p&gt;

&lt;p&gt;不同于直接在logcat中直接打印请求，Stetho 的运行依赖于OkHttp/3的网络连接器 interceptor。&lt;/p&gt;

&lt;p&gt;在这种方式下，Stetho通过Chrome Developer Tools调试网络请求。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*vs-fNOCQ7DzQMpoyekxWZA.png&quot; alt=&quot;Chrome Developer Tools through Stetho&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Chrome Developer Tools是一个十分棒的工具，他可以让你看见和网络活动相关的诸多信息。&lt;/p&gt;

&lt;p&gt;但是，如果你只是希望可以快速的查看网络请求，他可能不适合你。除此以外,你无法快捷地和别人共享这些信息，除非你复制这些信息，&lt;/p&gt;

&lt;h2 id=&quot;你应该选择哪一个呢&quot;&gt;你应该选择哪一个呢？&lt;/h2&gt;

&lt;p&gt;我觉得并没有一个放之四海而皆准的标准，相反，我相信，不同的场景有着不同的解决方案，上述的每一种方案都有对应的最佳应用场景。&lt;/p&gt;

&lt;p&gt;在我的项目中，我使用OKHttp的 HttpLoggingInterceptor，它可以在logcat中直接输出和请求相关的基本信息。同时，我也使用OKLog，他可以让我在浏览器中快速查看对应的网络请求，也可以和我的同事共享这些信息。&lt;/p&gt;

&lt;p&gt;注意,你只能在你的debug版本中，&lt;a href=&quot;http://developer.android.com/tools/publishing/preparing.html#publishing-configure&quot;&gt;不要在release版本中&lt;/a&gt;，打印网络响应。&lt;a href=&quot;https://github.com/JakeWharton/timber/blame/a6b2e220a33da939da181de37a5cd68be843f63a/README.md#L16-L17&quot;&gt;在release版本中，你不应该输出任何日志&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这篇文章有趣不？记得在&lt;a href=&quot;https://medium.com/@simonpercic&quot;&gt;Medium&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/simonpercic&quot;&gt;Twitter&lt;/a&gt; 或 &lt;a href=&quot;https://github.com/simonpercic&quot;&gt;GitHub&lt;/a&gt;关注我哦。&lt;/p&gt;
</description>
        <pubDate>Tue, 03 May 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/05/03/Effortless-network-response-logging-on-Android/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/05/03/Effortless-network-response-logging-on-Android/</guid>
        
        <category>Android</category>
        
        <category>Network</category>
        
        <category>Log</category>
        
        
      </item>
    
      <item>
        <title>Layouts, Attributes, and you</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;原文链接 : &lt;a href=&quot;https://medium.com/google-developers/layouts-attributes-and-you-9e5a4b4fe32c#.egixi9sq1&quot;&gt;Layouts, Attributes, and you&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;原文作者 : &lt;a href=&quot;https://medium.com/@ianhlake&quot;&gt;ianhlake&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;译文出自 : &lt;a href=&quot;http://www.devtf.cn&quot;&gt;开发技术前线 www.devtf.cn&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;转载声明: 本译文已授权&lt;a href=&quot;http://toutiao.io/download&quot;&gt;开发者头条&lt;/a&gt;享有独家转载权，未经允许，不得转载!&lt;/li&gt;
    &lt;li&gt;译者 : &lt;a href=&quot;https://github.com/mijack&quot;&gt;mijack&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;校对者: &lt;a href=&quot;https://github.com/mijack&quot;&gt;mijack&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;状态 :  未完成&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是一个老生常谈的问题了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[What layout should I be using?](http://stackoverflow.com/search?q=what+layout+should+I+use+%5Bandroid%5D&amp;amp;utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于一个Android开发者，知道如何将你印象中的界面（设计师给你的草图）转化成实际中的布局界面是十分重要的技能。&lt;/p&gt;

&lt;h2 id=&quot;什么是布局&quot;&gt;什么是布局？&lt;/h2&gt;

&lt;p&gt;仅仅是浏览developer.android.com查找Layout，你会发现很多以&lt;code class=&quot;highlighter-rouge&quot;&gt;Layout&lt;/code&gt;结尾的类。他们都有什么共同点呢？他们都是ViewGroup的子类 - 一个支持添加子视图（通常被称为子视图）的&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;View&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;正如你所想象的，一个ViewGroup的主要职责之一是对子视图进行布局：每个View有多大（以下简称&lt;code class=&quot;highlighter-rouge&quot;&gt;measure&lt;/code&gt;）和将View放置ViewGroup内（以下简称&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;阶段）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：那并不是ViewGroup所有的事。当然，这可以有自己的定制行为，绘制自己以及子View。例如Toolbar除了支持子视图，他还有很多内置的功能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;毫无疑问，你会选择较为合适的布局，布置子视图的位置，这是十分关键的。错误的布局可能会完成不了当前的布局或者性能不一定很好，而较好的布局可以知道简化事件的效果。&lt;/p&gt;

&lt;h2 id=&quot;layout_-attributes&quot;&gt;Layout_ Attributes&lt;/h2&gt;

&lt;p&gt;和View一样，ViewGroup可以使用XML属性，如LinearLayout的android:orientation，改变他们的子View的布局，但是，这些属性将会引发每一个子View的变化。为了防止子视图间的递归传递，布局使用了不同的机制向子视图中添加使用形如&lt;code class=&quot;highlighter-rouge&quot;&gt;layout_&lt;/code&gt;的属性。&lt;strong&gt;这些属性是关于父布局的属性说明&lt;/strong&gt;，和View本身无关，我们可以从之前写的&lt;a href=&quot;https://plus.google.com/+IanLake/posts/Hepj6KynZD5?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;建议&lt;/a&gt;中找到一个例子。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;android.support.design.widget.AppBarLayout&amp;gt;
    &amp;lt;android.support.v7.widget.Toolbar
      app:layout_scrollFlags=&quot;scroll|enterAlways&quot; /&amp;gt;
  &amp;lt;/android.support.design.widget.AppBarLayout &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你查看Toolbar，你不会找到任何和layout_scrollFlags有关的信息。但是你可以在&lt;a href=&quot;http://developer.android.com/reference/android/support/design/widget/AppBarLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;AppBarLayout&lt;/a&gt;找到。这些布局属性实际存储在&lt;a href=&quot;http://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;LayoutParams&lt;/a&gt;（在这个案例中，是子类&lt;a href=&quot;http://developer.android.com/reference/android/support/design/widget/AppBarLayout.LayoutParams.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;AppBarLayout.LayoutParams&lt;/a&gt;）。当视图附属在parent View时，就有和parent相关的LayoutParams，它存储着和布局位置相关的信息。默认情况下，这只是一个宽度和高度（即你可以在每一个视图中找到layout_width和layout_height），但每个ViewGroup中都可以在自己的LayoutParams的子类，声明新的属性（具体描述请见&lt;a href=&quot;http://developer.android.com/guide/topics/ui/declaring-layout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#layout-params&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：从XML文件中加载视图却传递参数parent（也就是调用LayoutInflater.inflate()中的parent=null），这是一个不好的习惯，因为没有这个参数，有没有人来解析和创建适当的LayoutParams对象，这就意味着所有的属性都扔掉 - 这可能不是你想要的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;常用的androidlayouts&quot;&gt;常用的AndroidLayouts&lt;/h2&gt;

&lt;p&gt;大概知道文档中的LayoutParams和layout_ 属性足以帮助您选择合适的布局，但要是一个快速的总结再好不过了。&lt;/p&gt;
&lt;h3 id=&quot;linearlayout&quot;&gt;LinearLayout&lt;/h3&gt;

&lt;p&gt;LinearLayout的功能比较单一：按照单一的行或列布局（具体取决于&lt;a href=&quot;http://developer.android.com/reference/android/widget/LinearLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#attr_android:orientation&quot;&gt;android:orientation&lt;/a&gt;是 &lt;a href=&quot;http://developer.android.com/reference/android/widget/LinearLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#HORIZONTAL&quot;&gt;horizontal&lt;/a&gt; 还是 &lt;a href=&quot;http://developer.android.com/reference/android/widget/LinearLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#VERTICAL&quot;&gt;vertical&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;即便如此，LinearLayout只有一个方向，但是它还有一个绝招：&lt;a href=&quot;http://developer.android.com/guide/topics/ui/layout/linear.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#Weight&quot;&gt;layout_weight&lt;/a&gt; ，允许子View的大小拓展以填满整个布局——当你有一部分view是自适应时，而而其他需要尽可能多的空间时，它是非常有用的。&lt;/p&gt;
&lt;h3 id=&quot;framelayout&quot;&gt;FrameLayout&lt;/h3&gt;

&lt;p&gt;相比LinearLayout,&lt;a href=&quot;http://developer.android.com/reference/android/widget/FrameLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;FrameLayout&lt;/a&gt;的行为就大相径庭了：这里所有的View都压在一起绘制。位置的唯一控制要素就是&lt;a href=&quot;http://developer.android.com/reference/android/widget/FrameLayout.LayoutParams.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#attr_android:layout_gravity&quot;&gt;layout_gravity&lt;/a&gt; - 可以将View放置在FrameLayout的一侧或中心。&lt;/p&gt;

&lt;h3 id=&quot;relativelayout&quot;&gt;RelativeLayout&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/RelativeLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;RelativeLayout&lt;/a&gt;几乎没有前面两个那么简单：看看&lt;a href=&quot;http://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;RelativeLayout.LayoutParams&lt;/a&gt;，关于子view和RelativeLayout或者其他View的[位置关系](http://developer.android.com/guide/topics/ui/layout/relative.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#Position（例如&lt;a href=&quot;http://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#attr_android:layout_below&quot;&gt;一个view放置在另一个view下面&lt;/a&gt;），就有一大堆的属性（实际上和FrameLayout类似的）。&lt;/p&gt;

&lt;p&gt;这具有非常强大的的优势（子View之间可以相互依赖），但是&lt;a href=&quot;https://www.youtube.com/watch?v=dB3_vgS-Uqo?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;注意布局的性能&lt;/a&gt;！&lt;/p&gt;

&lt;h3 id=&quot;percentframelayout-和-percentrelativelayout&quot;&gt;PercentFrameLayout 和 PercentRelativeLayout&lt;/h3&gt;

&lt;p&gt;作为&lt;a href=&quot;https://plus.google.com/+AndroidDevelopers/posts/C8oaLunpEEj?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;Percent Support Library&lt;/a&gt;的成员，&lt;a href=&quot;http://developer.android.com/reference/android/support/percent/PercentFrameLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;PercentFrameLayout&lt;/a&gt; 和 &lt;a href=&quot;http://developer.android.com/reference/android/support/percent/PercentRelativeLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;PercentRelativeLayout&lt;/a&gt; 允许你使用基于百分比的尺寸来设置尺寸或者margin，你可以使用layout_widthPercent=”50%”表示布局的一半，而无须其思考具体的值。&lt;/p&gt;

&lt;p&gt;它们还有一个最令人振奋的功能：&lt;a href=&quot;https://plus.google.com/+AndroidDevelopers/posts/ZQS29a5yroK?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;支持纵横比ratio&lt;/a&gt;，使得它可以指定单个尺寸（高度或宽度）和与之对应的固定纵横比来指定尺寸。甚至对于一个维度上的wrap_content或match_parent它也是起作用的！&lt;/p&gt;

&lt;h3 id=&quot;gridlayout&quot;&gt;GridLayout&lt;/h3&gt;

&lt;p&gt;在&lt;a href=&quot;http://android-developers.blogspot.com/2011/11/new-layout-widgets-space-and-gridlayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;2011&lt;/a&gt;年的Ice Cream Sandwich，我们引入了&lt;a href=&quot;http://developer.android.com/reference/android/support/v7/widget/GridLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;GridLayout&lt;/a&gt;，但现在它是&lt;a href=&quot;http://developer.android.com/tools/support-library/features.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#v7-gridlayout&quot;&gt;Support库&lt;/a&gt;的一部分（支持API 7）。支持将View防止在任意行和列，并和LinearLayout一样支持权重（weight），可以让你的层级变浅，同时避免由于使用RelativeLayout带来的复杂布局和性能下降。&lt;/p&gt;

&lt;p&gt;不像大多数的布局，GridLayout不要求子View有layout_height和layout_width每个视图 - 列和行会根据&lt;a href=&quot;http://developer.android.com/reference/android/support/v7/widget/GridLayout.Alignment.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;基线&lt;/a&gt; 调整布局。
如果你想研究这个组件，我强烈建议你阅读&lt;a href=&quot;http://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;GridLayout.LayoutParams&lt;/a&gt;的文档和&lt;a href=&quot;http://android-developers.blogspot.com/2011/11/new-layout-widgets-space-and-gridlayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;博客&lt;/a&gt; （注意，文章是在GridLayout有了layout_weight属性之前写的）。&lt;/p&gt;

&lt;h3 id=&quot;coordinatorlayout&quot;&gt;CoordinatorLayout&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;CoordinatorLayout&lt;/a&gt;,是&lt;a href=&quot;http://android-developers.blogspot.com/2015/05/android-design-support-library.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;Android Design Support Library&lt;/a&gt;中FrameLayout的子类，除了可以使用layout_gravity控制子View的位置外，还提供了&lt;a href=&quot;http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;Behavior&lt;/a&gt;的概念。&lt;/p&gt;

&lt;p&gt;通过给View添加 &lt;a href=&quot;http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.DefaultBehavior.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;@DefaultBehavior&lt;/a&gt; 注解、使用布局属性layout_behavior或者调用方法&lt;a href=&quot;http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.LayoutParams.html?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog#setBehavior%28android.support.design.widget.CoordinatorLayout.Behavior%29&quot;&gt;setBehavior()&lt;/a&gt;可以给View添加behavior可以在子view之前拦截事件（包括measurement, layout, nested scrolling, touch events, 根据依赖的view做出对应的更改以及window insets）。&lt;/p&gt;

&lt;p&gt;深入理解Behaviors，请看博客&lt;a href=&quot;https://medium.com/google-developers/intercepting-everything-with-coordinatorlayout-behaviors-8c6adc140c26?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;Intercepting everything with CoordinatorLayout Behaviors&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;layouts-layouts-layouts&quot;&gt;Layouts, layouts, layouts&lt;/h1&gt;

&lt;p&gt;即使你只使用上述的一部分布局，你也可以搭建出很多高性能且易于维护的界面。剩下的时间，你可以针对特定的布局思考一下是否存在更简单的布局方式或者使用自定义视图（或者考虑一下扩展性）。&lt;/p&gt;

&lt;p&gt;不论怎么样，使用正确的布局和布局属性可以帮助我们更好的构建应用。&lt;/p&gt;

&lt;p&gt;更多信息，请关注&lt;a href=&quot;https://plus.google.com/collection/sLR0p?utm_campaign=android_series_layoutattributes_012116&amp;amp;utm_source=medium&amp;amp;utm_medium=blog&quot;&gt;Android Development Patterns Collection&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/03/26/Layouts-Attributes-and-you/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/03/26/Layouts-Attributes-and-you/</guid>
        
        <category>Android</category>
        
        <category>Layout</category>
        
        
      </item>
    
      <item>
        <title>Android逆向工程101 – Part 5</title>
        <description>&lt;p&gt;到目前为止,在之前关于Android逆向工程的介绍中，我们已经知道了&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-1/&quot;&gt;APK文件的格式&lt;/a&gt;,如何使用使用&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-2/&quot;&gt;AAPT&lt;/a&gt;提取应用程序中和Android SDK相关的有用信息，如何&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-3/&quot;&gt;将DEX字节码转化成更具可读性、易于编辑的格式&lt;/a&gt;以及如何&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-4/&quot;&gt;反编译和修改Android应用程序的源代码和资源&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;本文是这个系列的最后一篇文章，我们将介绍&lt;a href=&quot;https://github.com/androguard/androguard&quot;&gt;&lt;strong&gt;Androguard&lt;/strong&gt;&lt;/a&gt;，一个可以处理Android文件的python工具&lt;/p&gt;

&lt;p&gt;根据官网的介绍，&lt;strong&gt;Androguard&lt;/strong&gt; 可以做以下几件事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;DEX, ODEX&lt;/li&gt;
    &lt;li&gt;APK&lt;/li&gt;
    &lt;li&gt;Android二进制格式的xml文件&lt;/li&gt;
    &lt;li&gt;Android 资源&lt;/li&gt;
    &lt;li&gt;反汇编 DEX/ODEX 字节码&lt;/li&gt;
    &lt;li&gt;DEX/ODEX文件的反编译&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Androguard的功能是相当出色的，Github上的介绍并不完整，可以在&lt;a href=&quot;https://code.google.com/p/androguard/#Features&quot;&gt;这里&lt;/a&gt;找到更为全面的介绍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Androguard&lt;/strong&gt; 可用于Linux，OS X,Windows等平台&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&quot;https://code.google.com/p/androguard/wiki/Installation&quot;&gt;项目以前的主页&lt;/a&gt;，详细介绍了安装过程，而GitHub上的文档不提供任何更新的信息。&lt;/p&gt;

&lt;p&gt;需要注意的是我们的机器上要安装了Python（&lt;code class=&quot;highlighter-rouge&quot;&gt;2.6&lt;/code&gt;或更高版本），这用于反编译/反汇编APK文件。对于更高级的功能，它是需要安装其它模块：在安装页面上，我们可以找到关于各模块的需要的简要说明。&lt;/p&gt;

&lt;p&gt;注意在&lt;strong&gt;Androguard&lt;/strong&gt;文件夹中运行如下命令：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo python setup.py install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在安装好以后，我们可以直接在 &lt;strong&gt;Androguard&lt;/strong&gt; 的主文件夹下运行这些工具。&lt;/p&gt;

&lt;p&gt;如果机器的操作系统是Windows，建议在 &lt;strong&gt;ARE&lt;/strong&gt;-Android Reverse Engineering virtual machine(还包含有其他的逆向工程工具) 上运行 &lt;strong&gt;Androguard&lt;/strong&gt;:关于程序的下载和安装相关介绍可以在官方&lt;a href=&quot;https://redmine.honeynet.org/projects/are/wiki&quot;&gt;wiki&lt;/a&gt;页面找到。我们只需要使用&lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;运行这个镜像就行了。&lt;/p&gt;

&lt;p&gt;文章中所有的例子使用的 &lt;strong&gt;Androguard&lt;/strong&gt; 的版本都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2.0&lt;/code&gt; 。它可以在&lt;a href=&quot;https://github.com/androguard/androguard/releases/tag/v2.0&quot;&gt;这里&lt;/a&gt;直接下载，也可以在&lt;a href=&quot;https://github.com/androguard/androguard/releases&quot;&gt;stable releases页面&lt;/a&gt;中选择另一个版本。&lt;/p&gt;

&lt;p&gt;要做的第一件事，就是检查我们的安装是否正常，所以让我们需要加入 &lt;strong&gt;Androguard&lt;/strong&gt; 的主文件夹，然后输入以下命令：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;androlyze.py -s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们将看到下面这个输出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i2.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-04-at-18.14.40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个交互式的命令行，正在等待输入.&lt;/p&gt;

&lt;p&gt;在分析时，我们需要设置apk文件以及反编译的类型。事实上，有3个不同的反编译类型：&lt;strong&gt;DAD&lt;/strong&gt; ，&lt;strong&gt;DED&lt;/strong&gt; 和 &lt;strong&gt;dex2jar&lt;/strong&gt; + &lt;strong&gt;JED&lt;/strong&gt;。具体介绍请看&lt;a href=&quot;https://code.google.com/p/androguard/wiki/Decompiler&quot;&gt;这里&lt;/a&gt;。在下面的例子中，我们使用的是DAD，因为它是默认的反编译类型，所以无需额外的配置。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a,d,dx = AnalyzeAPK(&quot;FILENAME.apk&quot;, decompiler=&quot;dad&quot;)&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i2.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-04-at-18.30.51.png?resize=1024%2C118&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;反编译一个程序的时间取决于具体的apk文件：当程序完成后，我们就可以根据提示运行其他命令。&lt;/p&gt;

&lt;p&gt;现在，我们可以输入&lt;code class=&quot;highlighter-rouge&quot;&gt;a.&lt;/code&gt;，然后按下TAB键，我们可以得到APK想干的自动补全提示。&lt;/p&gt;

&lt;p&gt;我们先用一些简单的命令来获得APK文件中的一些有用信息吧。&lt;/p&gt;

&lt;h2 id=&quot;apk-文件&quot;&gt;APK 文件&lt;/h2&gt;

&lt;p&gt;它可以列出APK文件(其本质上是一个ZIP文件)中包含的所有文件：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.get_files()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-14.52.30.png?resize=1024%2C587&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;application-activities&quot;&gt;Application Activities&lt;/h2&gt;

&lt;p&gt;使用如下命令，我们可以得到应用中包含的所有Activity：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.get_activities()&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;application-的权限&quot;&gt;Application 的权限&lt;/h2&gt;

&lt;p&gt;使用如下的命令，我们可以得到应用在manifest文件中声明的所有权限：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.get_permissions()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i2.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-14.47.29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它也可以得到关于每一项权限的详细描述：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.get_requested_aosp_permissions_details()&lt;/code&gt;
&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-15.09.31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Androguard&lt;/strong&gt; 的一个重要的特征就是可以找到应用程序的哪些代码请求了在manifest文件中声明的权限。&lt;/p&gt;

&lt;p&gt;它可以帮助我们做一下几件事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;知道我们是否忘记了需要在manifest文件声明的权限&lt;/li&gt;
  &lt;li&gt;知道我们是否在manifest文件中声明了多余的权限&lt;/li&gt;
  &lt;li&gt;帮助我们review使用到权限的代码片段，再次确认我们可能遗漏的注解。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show_Permissions(dx)&lt;/code&gt;
&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-17.09.55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;application-content-providers&quot;&gt;Application Content providers&lt;/h2&gt;

&lt;p&gt;使用如下的命令，我们可以得到应用在manifest文件中声明的所有Content Provider：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.get_providers()&lt;/code&gt;
&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-14.42.07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;application-signature&quot;&gt;Application signature&lt;/h2&gt;

&lt;p&gt;同时，我们也可以知道apk文件的签名以及其存放的位置：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.get_signature_name()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a.get_signature()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.androguard.re/html/index.html&quot;&gt;这里&lt;/a&gt;是目前最为完整的命令列表的文档：它的版本是&lt;code class=&quot;highlighter-rouge&quot;&gt;1.9&lt;/code&gt;，不管怎么说，它都是一个很好的参考文档。&lt;/p&gt;

&lt;h2 id=&quot;code-dumping&quot;&gt;Code dumping&lt;/h2&gt;

&lt;p&gt;使用工具 &lt;strong&gt;androdd&lt;/strong&gt;，我们可以得到APK文件中所有类的源代码（整理包括应用的代码和依赖）：在这种情况下，我们得到的是Java类，而不是我们使用&lt;a href=&quot;HTTP：//www.fasteque.com/android-reverse-engineering-101-part-3/&quot;&gt;dex2jar&lt;/a&gt;得到的&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;文件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;androdd.py -i FILENAME.apk -o OUTPUT_DIR&lt;/code&gt;
&lt;img src=&quot;http://i2.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-15.44.22.png?resize=1024%2C430&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在输入文件中，我们可以根据包名找到对应的Java类。&lt;/p&gt;

&lt;p&gt;当然，我们得到的代码可能和之前开发者写的代码不完全一样，但无论如何，它的可读性提高了，更容易理解。请记住，如果原来的应用程序代码已经被混淆，方法和类的名称可能已被重命名，工具不能得到原来的名称。&lt;/p&gt;

&lt;p&gt;例如，下面是我们的一个Fragment：源代码可以在&lt;a href=&quot;https://github.com/fasteque/rgb-tool/blob/master/android-rgb-tool/src/main/java/com/fastebro/androidrgbtool/fragments/SelectPictureDialogFragment.java&quot;&gt;这里&lt;/a&gt;找到.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i0.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-15.52.47.png?resize=1024%2C390&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正如在本系列中之前的介绍中，我们知道，我们无法找到资源名称，如字符串，布局，阵列，颜色，但是，我们可以得到的是一个整形值，在build的时候他和特定的资源相对应，并存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;R.java&lt;/code&gt;文件中。在这里，它表示为一个十进制值，而在原来的类文件是十六进制。&lt;/p&gt;

&lt;h2 id=&quot;xml-manifest&quot;&gt;XML manifest&lt;/h2&gt;

&lt;p&gt;使用下面的工具，我们可以得到manifest文件，在apk文件中，它只要是以二进制格式存在的，我们得到的是纯文本格式的xml文件，更容易阅读。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;androaxml.py -i FILENAME.apk -o OUTPUT.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果我们打开生成的XML文件，我们可以看到完整的APK manifest 文件，几乎和&lt;a href=&quot;https://github.com/fasteque/rgb-tool/blob/master/android-rgb-tool/src/main/AndroidManifest.xml&quot;&gt;原来文件&lt;/a&gt;一样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-16.10.44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;比较两个apk文件&quot;&gt;比较两个apk文件&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Androguard&lt;/strong&gt; 还提供了一个重要的工具 &lt;strong&gt;androsim&lt;/strong&gt; ，可以用于比较两个应用里的文件。这是一个重要的功能，因为我们可以将一个源程序和另一个程序比较，检测其是否有所改变，可以用于检测恶意软件。同时也可以查看同一应用程序的两个不同版本之间的差异。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;danielealtomare$ androsim.py -i FILENAME_1.apk FILENAME_2.apk -c ZLIB -n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这是两个APK文件比较的输出结果:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-16.26.17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以下是同一应用程序的两个不同版本的比较结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/12/Screen-Shot-2015-12-05-at-16.56.22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt;可以得到可用于该工具的所有选项，因此这可以让分析更加精确，集中于应用程序的具体方面。&lt;/p&gt;

&lt;p&gt;当然，&lt;strong&gt;Androguard&lt;/strong&gt; 还可以做很多事情，但是，本文的目的只是简单介绍一下工具以及相关的实验和分析。&lt;/p&gt;

&lt;h2 id=&quot;mentions&quot;&gt;MENTIONS&lt;/h2&gt;

&lt;p&gt;结束系列之前，还要介绍一些比较好的工具。&lt;/p&gt;

&lt;p&gt;第一个是&lt;a href=&quot;https://bytecodeviewer.com/&quot;&gt;Bytecode Viewer&lt;/a&gt;，它实际上是一套完整的逆向工程工具：它使我们通过smali/baksmali轻松地编辑apk文件以及浏览APK和DEX文件。同时也集成了 &lt;strong&gt;dex2jar&lt;/strong&gt; 和&lt;strong&gt;Apktool&lt;/strong&gt;。更多信息可以查看&lt;a href=&quot;https://the.bytecode.club/wiki/index.php?title=Bytecode_Viewer&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;第二个是&lt;a href=&quot;https://github.com/google/android-classyshark&quot;&gt;ClassyShark&lt;/a&gt;，这是为Android可执行文件设计的一个浏览器。它的客户端可以打开Android（APK）和桌面（JAR）文件。我们可以用ClassyShark打开APK/ ZIP/Class/Jar文件，并分析其内容。&lt;/p&gt;

&lt;p&gt;这个系列就结束了：正如之前强调的，这只是简单介绍了Android的逆向工程以及一些工具的简单使用。当然，这只是逆向工程的冰山一角。对Android逆向工程的了解程度取决于我们的实际需要,所以,我们可能会发现一些更适合的工具。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 13:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/01/17/Android-Reverse-Engineering-101-Part-5/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/17/Android-Reverse-Engineering-101-Part-5/</guid>
        
        <category>Android</category>
        
        <category>逆向工程</category>
        
        
      </item>
    
      <item>
        <title>Android逆向工程101 – Part 4</title>
        <description>&lt;p&gt;在Android应用逆向工程的系列博客中，我们已经讨论过了&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-1/&quot;&gt;APK的文件格式&lt;/a&gt;, &lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-2/&quot;&gt;aapt&lt;/a&gt; 和 &lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-3/&quot;&gt;dex2jar&lt;/a&gt;，接下来我们介绍&lt;strong&gt;Apktool&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我们都知道，APK的资源文件是经过压缩以二进制的格式存储在文件中，我们无法通过&lt;strong&gt;aapt&lt;/strong&gt;和&lt;strong&gt;dex2jar&lt;/strong&gt;对其进行查看和编辑，前者实质是一个读取工具，用于从apk中提取有用的信息；而后者只能帮助我们获取到Apk中的执行代码并不能获取资源文件。&lt;/p&gt;

&lt;p&gt;下面是摘抄自Apktool的&lt;a href=&quot;https://ibotpeaches.github.io/Apktool/&quot;&gt;官方网站&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一种用于逆向第三方闭源Android工程的工具，它可以反编译出和源文件形式相似的资源文件，并对其进行修改、重打包。可以对Smail代码进行单步调试。因为项目结构和开发时的较为相近以及自身所带的Apk构建等自动化操作，这让开发应用更加方便。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，这个工具是逆向工程的必备工具，因为它能对资源进行解码。&lt;/p&gt;

&lt;p&gt;这里需要注意的是，记住，它&lt;strong&gt;不能&lt;/strong&gt;用于涉及隐私或者其他非法的用途。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://ibotpeaches.github.io/apktool/install/&quot;&gt;这个网站&lt;/a&gt;是关于如何安装的详细介绍。只需要检查一下Java版本，去环境说明章节看一下对应的平台（Window，Linux，Mac OS X）上的说明。&lt;/p&gt;

&lt;p&gt;本文使用的 &lt;strong&gt;Apktool&lt;/strong&gt; 的版本是 &lt;code class=&quot;highlighter-rouge&quot;&gt;v2.0.2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;按照说明正确安装设置后，我们在命令行中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;apktool&lt;/code&gt;,得到如下输出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-23-at-22.11.54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在输入第一个命令之前，我们需要选择一个应用。在之前介绍&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-3/&quot;&gt;&lt;strong&gt;dex2jar article&lt;/strong&gt;&lt;/a&gt;，我选择了&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.fastebro.androidrgbtool&quot;&gt;RGB Tool&lt;/a&gt; ，因为它是我的一个开源项目，对其进行逆向工程并不会有任何争议。我们可以在&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.fastebro.androidrgbtool&quot;&gt;这里&lt;/a&gt;下载这个该应用。&lt;/p&gt;

&lt;p&gt;对于所有的实例，均运行在我的&lt;strong&gt;Nexus 6&lt;/strong&gt;上，安装有&lt;strong&gt;RGB Tool v1.4.3&lt;/strong&gt; ，系统版本&lt;strong&gt;Android 6.0&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;frameworks&quot;&gt;FRAMEWORKS&lt;/h2&gt;

&lt;p&gt;在反编译APK或者系统应用的过程中，Frameworks是非常重要的。事实上，在一台设备或者模拟器上，有一APK文件包括了ROM里的所有资源，包括图片、动画、声音、闪屏等，它是系统镜像的一部分.&lt;/p&gt;

&lt;p&gt;这个文件位于&lt;code class=&quot;highlighter-rouge&quot;&gt;/system/framework/framework-res.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;简单的讲，这个文件包括关于设备界面风格所需的必要资源，被系统获取其他应用使用。对于任何一个制造商，包括三星，HTC，摩托罗拉，LG等，它都会提供自己的frameworkd的APK文件。&lt;/p&gt;

&lt;p&gt;Apktool默认情况下使用的是AOSP的framework，并在如下路径（Mac OS X）有对应文件的拷贝:&lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/Library/apktool/framework/1.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果我们需要反编译基于一个另外的Framework系统的应用，我们可能安需要装它，否则我们会得到下面的错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;W: Could not decode attr value, using undecoded value instead: ns=android, name=drawable
W: Could not decode attr value, using undecoded value instead: ns=android, name=iconCan't find framework resources for package of id: 2. You must install proper framework files, see project website for more info.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一件事情就是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;adb pull&lt;/code&gt;从设备中导出framework的APK文件，一般情况下，我们可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;/system/framework&lt;/code&gt;找到它, 如果还是找不到它，可以在 &lt;a href=&quot;http://ibotpeaches.github.io/Apktool/documentation/#framework-files&quot;&gt;该网站&lt;/a&gt;查看所有可能的路径。&lt;/p&gt;

&lt;p&gt;然后，我们可以安装它： &lt;code class=&quot;highlighter-rouge&quot;&gt;apktool if FRAMEWORK.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在执行完这步操作后，我们可以反编译系统应用了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: 本文的后续章节使用的是默认的AOSP framework，所以无需重新安装。&lt;/p&gt;

&lt;h2 id=&quot;反编译&quot;&gt;反编译&lt;/h2&gt;

&lt;p&gt;运行如下命令，就可以反编译APK文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apktool d FILENAME.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i0.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-23-at-22.45.01.png&quot; alt=&quot;apktool decode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;工具创建了一个文件夹，并在反编译好APK后对其进行重命名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i0.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-25-at-21.29.38.png?resize=1024%2C218&quot; alt=&quot;apktool decode output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;apktool 反编译的输出&lt;/p&gt;

&lt;p&gt;请注意,输出文件夹的内容取决于APK文件以及其包含的文件。&lt;/p&gt;

&lt;p&gt;首先要注意的是&lt;code class=&quot;highlighter-rouge&quot;&gt;apktool.yml&lt;/code&gt;文件：它包含重要的信息,如应用&lt;strong&gt;版本名称&lt;/strong&gt;、&lt;strong&gt;代码&lt;/strong&gt;、&lt;strong&gt;最小和支持SDK版本&lt;/strong&gt;…当我们重新构建APK文件的时候，此文件是必需的,特别如果我们想改变其中的某个值。&lt;/p&gt;

&lt;p&gt;我们有了XML格式的&lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;文件, &lt;strong&gt;并不是二进制格式&lt;/strong&gt;, 所以我们可以对其进行浏览和编辑。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;original&lt;/code&gt;文件夹通常包含&lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest. xml&lt;/code&gt;二进制格式文件和含有JAR文件清单和apk签名的&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF&lt;/code&gt;文件夹。基本上，这两项是直接从apk里复制得到的，没有做过修改。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Smali&lt;/code&gt;文件夹包含了应用程序中Smali格式的源代码：&lt;a href=&quot;HTTP：/ / www.fasteque。COM / android-reverse-engineering-101-part-3 /&quot;&gt;在我以前的文章&lt;/a&gt;，已经讨论过这一点了，所以我只提到几件事。首先，代码的目录结构是依据包名。从中我们可以得到所有的可执行代码，其中包括来自第三方依赖的代码也在这个文件夹中。其次，我们可以对其进行修改，并对其进行重打包操作，形成新的APK文件。&lt;/p&gt;

&lt;p&gt;最后一个文件夹是&lt;code class=&quot;highlighter-rouge&quot;&gt;res&lt;/code&gt;，很明显，这是资源文件夹：&lt;strong&gt;apktool&lt;/strong&gt; 能反编译以【二进制形式](http://www.fasteque.com/android-reverse-engineering-101-part-1/)存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;resources.arsc&lt;/code&gt;中的资源，所以我们可以看到，当然也可以修改他们。这里有一个重要的事情：因为我们解码是运行在设备里的apk文件，所以，程序所有依赖的资源文件均在这个文件夹中，所以不必惊讶得到的资源文件比我们在Android Studio中看到的还要多。说明一点，在开发时我们使用了&lt;strong&gt;AppCompat V7&lt;/strong&gt;这个库作为其中的一个依赖，所以我们理所应当得到他的资源文件(它们的文件名以&lt;code class=&quot;highlighter-rouge&quot;&gt;abc_&lt;/code&gt;开头)。&lt;/p&gt;

&lt;p&gt;最后要注意的是，资源文件的子文件夹的名称不一定和项目或原有的应用的对应文件夹完全匹配，这样设计主要是为了apktool能够将这些资源重新打包，构建一个可以运行的APK。&lt;/p&gt;

&lt;h2 id=&quot;构建&quot;&gt;构建&lt;/h2&gt;

&lt;p&gt;使用如下命令就可以进行构建操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apktool b APKTOOL_DECODE_OUTPUT_DIR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apktool会根据反编译的输出文件夹进行重打包，将对应的APK文件放置在&lt;code class=&quot;highlighter-rouge&quot;&gt;APKTOOL_DECODE_OUTPUT_DIR/dist&lt;/code&gt;路径下。&lt;/p&gt;

&lt;p&gt;或者指定对应的APK路径：
&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-25-at-22.47.35.png&quot; alt=&quot;apktool build&quot; /&gt;
apktool build&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i0.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-25-at-22.48.26.png&quot; alt=&quot;apktool build output&quot; /&gt;
apktool build output&lt;/p&gt;

&lt;p&gt;请注意，如果Apktool构建的APK没有对应的签名，它将无法安装设备上。&lt;/p&gt;

&lt;p&gt;事实上，如果我们直接安装&lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt;目录下的APK文件，我们会得到如下错误：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-20.29.06.png&quot; alt=&quot;APK not signed error&quot; /&gt;
APK not signed error&lt;/p&gt;

&lt;p&gt;所以，在安装以前，我们需要使用如下命令对其进行签名（他会向我们提示输入密码和keystore）:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果这不是一个发布版本中，我们可以使用用于调试的keystore，使用方法和使用Android Studio一样，keystore文件位于一个隐藏文件夹中（用户文件夹取决于对应的平台环境）：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;USER_HOME/.android/debug.keystore&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Keystore的password是 &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt;, key alias 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;androiddebugkey&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;除此以外，我们还可以创建属于自己的keystore，请参考&lt;a href=&quot;http://developer.android.com/tools/publishing/app-signing.html#signing-manually&quot;&gt;官方文档&lt;/a&gt; (同时，他建议我们&lt;strong&gt;在签名以后对APK进行zipalign&lt;/strong&gt;).&lt;/p&gt;

&lt;h2 id=&quot;牛刀小试&quot;&gt;牛刀小试&lt;/h2&gt;

&lt;p&gt;现在，我们已经知道了如何对一个应用进行反编译和重打包，我们对应用做一些小的尝试，感受一下&lt;strong&gt;ApkTool&lt;/strong&gt;的特性。&lt;/p&gt;

&lt;p&gt;首先，我们来看一下应用原来的主界面，方便通过对比得出我们所做的修改。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screenshot_20151126-204826.png&quot; alt=&quot;RGB Tool original main view&quot; /&gt;
RGB Tool original main view&lt;/p&gt;

&lt;h2 id=&quot;应用的名称和主题&quot;&gt;应用的名称和主题&lt;/h2&gt;

&lt;p&gt;首先，我们来修改一下应用的名称和主题色。&lt;/p&gt;

&lt;p&gt;查看manifest文件, 我们发现应用的名称使用的是名为&lt;code class=&quot;highlighter-rouge&quot;&gt;app_name&lt;/code&gt;的string 资源. 所以打开&lt;code class=&quot;highlighter-rouge&quot;&gt;values/string.xml&lt;/code&gt;文件，将对应的值从 &lt;strong&gt;RGB Tool&lt;/strong&gt; 改为 &lt;strong&gt;MyRGB Tool&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;关于主题的颜色，让我们再看看manifest文件，确认主题设置在应用层：它是&lt;code class=&quot;highlighter-rouge&quot;&gt; Theme.Rgbtool&lt;/code&gt;。我们可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;values/styles.xml&lt;/code&gt;中找到它的声明，我们对如下部分比较感兴趣：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;item name=&quot;colorPrimary&quot;&amp;gt;@color/primary&amp;lt;/item&amp;gt;
&amp;lt;item name=&quot;colorPrimaryDark&quot;&amp;gt;@color/primary_dark&amp;lt;/item&amp;gt;
&amp;lt;item name=&quot;colorAccent&quot;&amp;gt;@color/accent&amp;lt;/item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以，我们将视线转移到&lt;code class=&quot;highlighter-rouge&quot;&gt;values/colors.xml&lt;/code&gt;，更改其中的颜色。关于在主题色的选择，我建议使用&lt;a href=&quot;http://www.materialpalette.com/&quot;&gt;Material Palette&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我定义了如下新的颜色：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;color name=&quot;primary&quot;&amp;gt;#4CAF50&amp;lt;/color&amp;gt;
&amp;lt;color name=&quot;primary_dark&quot;&amp;gt;#388E3C&amp;lt;/color&amp;gt;
&amp;lt;color name=&quot;accent&quot;&amp;gt;#FFC107&amp;lt;/color&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们来构建、签名apk。记住我们必须卸载已经安装好的应用，即便是覆盖安装也是这样。&lt;/p&gt;

&lt;p&gt;[]Modified RGB Tool](http://i0.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screenshot_20151126-212522.png)
Modified RGB Tool&lt;/p&gt;

&lt;h2 id=&quot;应用的图标&quot;&gt;应用的图标&lt;/h2&gt;

&lt;p&gt;我们可以通过和之前同样的方法更改应用程序的图标，因为我们知道那只是一个drawable PNG文件，它的名字是设置在manifest文件中了。所以，我们要做的变化很小，事实上它只需要更新成新的PNG文件（在这里不考虑屏幕密度）并重新生成apk文件。&lt;/p&gt;

&lt;p&gt;在这里，图标设置成&lt;code class=&quot;highlighter-rouge&quot;&gt;@mipmap/ic_launcher&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们将使用&lt;a href=&quot;http://jgilfelt.github.io/AndroidAssetStudio/index.html&quot;&gt;Android Asset Studio&lt;/a&gt;, 来生成新的启动图标，打开网页，选择&lt;strong&gt;Launcher icons&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;更新了新的PNG文件后，我们通过打包签名得到APK文件，新的应用图标展现在启动器上：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/11/myrgb_tool_icon.png&quot; alt=&quot;New application icon&quot; /&gt;
New application icon&lt;/p&gt;

&lt;h3 id=&quot;新的资源&quot;&gt;新的资源&lt;/h3&gt;

&lt;p&gt;到目前为止，我们只是替换同名的资源。如果，我们需要向应用添加新的资源，应该如何处理？我们来做一下这方面的尝试。&lt;/p&gt;

&lt;p&gt;我们打开应用，减小opacity（O）的值，我们可以看见背景里的Android机器人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screenshot_20151127-205409.png&quot; alt=&quot;RGB Tool android&quot; /&gt;
RGB Tool android&lt;/p&gt;

&lt;p&gt;它对应的资源是&lt;code class=&quot;highlighter-rouge&quot;&gt;@drawable/robot&lt;/code&gt;，有很多界面使用了它。我们把它提取出来，改改颜色后，命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;robot_apktool&lt;/code&gt;。然后，我们必须在所有的XML布局中的&lt;code class=&quot;highlighter-rouge&quot;&gt;robot&lt;/code&gt;替换成&lt;code class=&quot;highlighter-rouge&quot;&gt;robot_apktool&lt;/code&gt;。然后我们重新打包、签名、安装在我们的设备。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i0.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screenshot_20151127-211610.png&quot; alt=&quot;New robot&quot; /&gt;
New robot&lt;/p&gt;

&lt;p&gt;我们的新Android替换好了！说实话，这很容易，因为资源只被XML文件引用，但从未在任何java类出现过。后者和前者属于两种不同的情况，这也是我们不在这里讨论的原因。&lt;/p&gt;

&lt;h3 id=&quot;我们可以修改源代码吗&quot;&gt;我们可以修改源代码吗？&lt;/h3&gt;

&lt;p&gt;当然，在文章的开头我们已经介绍过了，&lt;strong&gt;Apktool&lt;/strong&gt; 可以反编译出应用的可执行代码，产生&lt;code class=&quot;highlighter-rouge&quot;&gt;.smali&lt;/code&gt;文件,所以我们可以直接更改它们，并生成新的APK文件。当然，
&lt;a href=&quot;https://github.com/jesusfreke/smali&quot;&gt;Smail&lt;/a&gt;并不及java那样容易入门，它的语法比较冗长。我们可以用任何文本编辑器打开这些文件，但是我们无法享受语法高亮和自动完成的编辑器特征。另一方面，我们可以很容易地用grep搜索字符串。&lt;/p&gt;

&lt;p&gt;在这里推荐一些工具：一个是开源的&lt;a href=&quot;https://github.com/ShaneWilton/sublime-smali&quot;&gt;syntax highlighter&lt;/a&gt;，而另一个是[全功能的解决方案]（http://virtuous-ten-studio.com/），不仅仅可以用来编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;smali&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;让我们通过smali尝试一个很简单的改变：如果我们点击 &lt;strong&gt;Print color&lt;/strong&gt; 选项（需要点击溢出菜单图标调出它），下面的对话框出现在屏幕上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i2.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screenshot_20151127-214535.png?resize=169%2C300&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们要做的是改变按钮文本从&lt;strong&gt;Skip&lt;/strong&gt;改为 &lt;strong&gt;Apktool&lt;/strong&gt;：在这个例子中，字符串资源用于java类,没有被XML资源文件引用。&lt;/p&gt;

&lt;p&gt;资源文件的名称是&lt;code class=&quot;highlighter-rouge&quot;&gt;action_common_skip&lt;/code&gt;，所以我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;res/values/strings.xml&lt;/code&gt;中创建了&lt;code class=&quot;highlighter-rouge&quot;&gt;action_common_skip_apktool&lt;/code&gt;的字符串. 整理还有意大利语和法语的资源。但是在这里，只要修改默认值即可。&lt;/p&gt;

&lt;p&gt;现在，我们搜索一下&lt;code class=&quot;highlighter-rouge&quot;&gt;action_common_skip&lt;/code&gt;, 我们将在&lt;code class=&quot;highlighter-rouge&quot;&gt;public.xml&lt;/code&gt;中找到3个String资源(默认，意大利语，法语)。比较有意思的是，我们在Smali文件中找不到搜索结果。查看&lt;a href=&quot;https://github.com/fasteque/rgb-tool/blob/master/android-rgb-tool/src/main/java/com/fastebro/androidrgbtool/fragments/PrintJobDialogFragment.java&quot;&gt;Java 类&lt;/a&gt;,我都知道源代码中确实有用到这个String资源，所以，我打开xml文件和对话框对应的smali文件, &lt;code class=&quot;highlighter-rouge&quot;&gt;PrintJobDialogFragment.smali&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public.xml&lt;/code&gt;是应用程序的所有资源的列表，如字符串、布局、图片、色彩等。每个资源对应十六进制的ID。这些ID实际上是R.java文件中的值。而R文件是我们在创建项目时由Android构建系统帮助我们生成的：没错，apktool在提取APK资源和反编译代码时创建的。正如在这个系列中&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-3/&quot;&gt;前面的文章&lt;/a&gt;所提到的，如果我们在Java类引用资源，比如Activity，它实际上是一个存储在R.java类中的整形ID。&lt;/p&gt;

&lt;p&gt;所以，我们在smali文件中查找如下的资源id：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;public type=&quot;string&quot; name=&quot;action_common_skip&quot; id=&quot;0x7f070017&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有趣的事又来了！他其实引用了（请注意，使用不同的应用或者通过克隆仓库构建新的APK，可能得到和例子中不一样的ID值）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const v2, 0x7f070017

invoke-virtual {p0, v2}, Lcom/fastebro/androidrgbtool/fragments/PrintJobDialogFragment;-&amp;gt;a(I)Ljava/lang/String;

move-result-object v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ID的值存储在常量 &lt;strong&gt;V2&lt;/strong&gt; 中，然后作为一个虚拟方法调用的参数（这将是&lt;code class=&quot;highlighter-rouge&quot;&gt;setTitle &lt;/code&gt;）。操作码汇总列表请看&lt;a href=&quot;http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;现在，我们理清了这些：我们知道我们必须更新&lt;code class=&quot;highlighter-rouge&quot;&gt;public.xml&lt;/code&gt;文件，加入我们新定义的字符串，并在smali文件设置对应的ID值。&lt;/p&gt;

&lt;p&gt;对于第一步，我们注意很多细节：我们可以注意到，资源类型和 &lt;strong&gt;id&lt;/strong&gt; 是连续的，一个所以我们不能随意设置ID值。我们需要寻找最后一个字符串资源，然后添加新的字符串资源，&lt;strong&gt;ID&lt;/strong&gt; 值在其基础上加1（记得那些hexacedimal值）。在这个例子中，最后一个字符串是&lt;code class=&quot;highlighter-rouge&quot;&gt;0x7f070051&lt;/code&gt; ,需要添加的&lt;strong&gt;id&lt;/strong&gt;如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;public type=&quot;string&quot; name=&quot;action_common_skip_apktool&quot; id=&quot;0x7f070052&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二步比起第一步简单很多。只需要将&lt;code class=&quot;highlighter-rouge&quot;&gt;PrintJobDialogFragment.smali&lt;/code&gt;中的值改成新的就可以了.&lt;/p&gt;

&lt;p&gt;现在，我们重新打包，签名，安装新的APK：界面里展示就是新的字符串了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i0.wp.com/www.fasteque.com/wp-content/uploads/2015/11/Screenshot_20151129-115055.png&quot; alt=&quot;New string resource&quot; /&gt;
New string resource&lt;/p&gt;

&lt;p&gt;这次更新主要介绍了 &lt;strong&gt;apktool&lt;/strong&gt; 的主要特点：我鼓励你用它试验使用你开发的APK。它很容易帮助你理解资源如何解码以及阅读smali代码。根据你的需求和应用的版本，对APK进行修改和重建。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-5/&quot;&gt;下一个章节&lt;/a&gt;，我将介绍Androguard.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 12:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/01/17/Android-Reverse-Engineering-101-Part-4/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/17/Android-Reverse-Engineering-101-Part-4/</guid>
        
        <category>Android</category>
        
        <category>逆向工程</category>
        
        
      </item>
    
      <item>
        <title>Android逆向工程101 – Part 2</title>
        <description>&lt;p&gt;在这个系列的&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-1/&quot;&gt;第一篇文章&lt;/a&gt; 中，我们已经探讨过了&lt;strong&gt;APK&lt;/strong&gt;和&lt;strong&gt;AAR&lt;/strong&gt; 组件的组成格式.&lt;/p&gt;

&lt;p&gt;正如之前所提到的，Google Play商店中可用的应用（或者几乎装在你手机上的所有的应用）都是一个apk文件。在第二部分，我们告诉你如何使用 &lt;strong&gt;aapt&lt;/strong&gt; 读取apk中与value部分有关的信息。&lt;/p&gt;

&lt;p&gt;###AAPT&lt;/p&gt;

&lt;p&gt;如果你安装了Android SDK，那么你就有&lt;strong&gt;aapt&lt;/strong&gt;了。事实上，“&lt;strong&gt;Android Asset Packaging Tool&lt;/strong&gt;”是android 构建工具中的一部分，你可以在以下路径中找到它，例如：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ANDROID_SDK_HOME/build-tools/23.0.2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;请注意，你会发现编译工具的每个版本都会有一个单独的文件夹：当你使用 Android SDK Manager去安装新版本的Build tools的时候，现有的版本并没有被覆盖，而是为其单独创建文件夹。这让你可以在不同版本的工具之间切换。&lt;/p&gt;

&lt;p&gt;在使用Android Studio的时候，你一定记得在model对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;脚本文件中设置Build Tools的版本。&lt;/p&gt;

&lt;p&gt;这个工具是Android构建系统中的一部分，它允许您查看、创建和更改ZIP兼容文件（例如zip，jar，APK）。它还可以将资源编译成二进制资源。&lt;/p&gt;

&lt;p&gt;Details about how the Android Build System works are beyond this article, but &lt;strong&gt;aapt&lt;/strong&gt; is mainly used in the process to:&lt;/p&gt;

&lt;p&gt;关于Android构建过程的具体细节不在本文的讨论范围之内，但是，你需要知道&lt;strong&gt;aapt&lt;/strong&gt;主要有以下几个作用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生成&lt;strong&gt;R.java&lt;/strong&gt;文件，这样是对资源文件的初步处理&lt;/li&gt;
  &lt;li&gt;将Android manifest、资源、assets等装入&lt;strong&gt;APK&lt;/strong&gt;文件&lt;/li&gt;
  &lt;li&gt;Add to the &lt;strong&gt;APK&lt;/strong&gt; file the compiled classes, which have been already converted to the dex format by the &lt;strong&gt;dx&lt;/strong&gt; tool.&lt;/li&gt;
  &lt;li&gt;编译class，使用&lt;strong&gt;dx&lt;/strong&gt;工具将其转化成dex，添加到&lt;strong&gt;APK&lt;/strong&gt;文件中。
更为详细的构建过程请看&lt;a href=&quot;http://developer.android.com/sdk/installing/studio-build.html&quot;&gt;官方文档&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同时，&lt;strong&gt;aapt&lt;/strong&gt;还可以用来从一个apk文件提取一些信息。&lt;/p&gt;

&lt;p&gt;If you would like to try the same commands, you just need to get one APK file as I have already explained in the &lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-1/&quot;&gt;first article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;如果你还想尝试那些命令，你可以使用我在&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-1/&quot;&gt;第一篇&lt;/a&gt;中提供的apk文件。&lt;/p&gt;

&lt;p&gt;###PACKAGE CONTENT&lt;/p&gt;

&lt;p&gt;获取&lt;strong&gt;apk&lt;/strong&gt;文件中的文件清单，只需要如下简单的指令：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt list FILENAME.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在其后面添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;，你将知道更多关于上述文件的信息，例如文件的大小，创建的日期时间，CRC-32循环冗余校验码等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-14-at-14.11.53-1024x410.png&quot; alt=&quot;&quot; /&gt;
aapt list -v
###PACKAGE DETAILS&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;dump&lt;/code&gt;指令，你可以找到更为详细的信息。&lt;/p&gt;

&lt;p&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;badging&lt;/code&gt;选项，会打印更多信息，如包名称、版本名称、版本号、权限、支持屏幕、启动时的&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt;、应用程序名称和图标文件，…&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump badging FILENAME.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-14-at-14.26.44.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-14-at-14.28.04-1024x234.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump badging&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;permissions&lt;/code&gt; 选项可以打印（和Android manifest文件中的包名称对应）应用所需的权限。请注意，只有在清单中显式声明的权限才会被列出来。例如，
&lt;code class=&quot;highlighter-rouge&quot;&gt;android.permission.WRITE_EXTERNAL_STORAGE&lt;/code&gt;隐式要求权限&lt;code class=&quot;highlighter-rouge&quot;&gt;android.permission.READ_EXTERNAL_STORAGE&lt;/code&gt;，但是该权限却不会出现在列表中。
&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump permissions FILENAME.apk&lt;/code&gt;
&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-14-at-14.38.35-1024x87.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump permissions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;configurations&lt;/code&gt; 选项会打印出apk的configurations:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump configurations FILENAME.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-14-at-16.50.59-1024x300.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump configurations&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt;指令会打印出APK文件的resource table 。
因此，你所得到的将是应用引用的所有资源列表，包括attributes, strings, dimens, layouts, styles, menus, drawables, …&lt;/p&gt;

&lt;p&gt;您还可以从应用的依赖库得到对应的资源：例如，如果&lt;code class=&quot;highlighter-rouge&quot;&gt; appcompat-v7 &lt;/code&gt;是项目中的一个依赖，那么他的资源也会被列出来。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump resources FILENAME.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-14-at-16.54.30-1024x425.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump resources&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最后一个命令&lt;code class=&quot;highlighter-rouge&quot;&gt; xmltree &lt;/code&gt;，他十分有用：它可以打印出asset中编译好的xml文件。正如我在第一篇文章所提到的，xml文件是以二进制文件的形式被打包到apk文件中。所以你不能使用编辑器或者阅读器把它打开。但是，使用这个命令，你至少读起来更容易一些。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump xmltree FILENAME.apk RESOURCE.xml&lt;/code&gt;
&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-14-at-17.07.31-1024x398.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;aapt dump xmltree&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这就是&lt;strong&gt;aapt&lt;/strong&gt;中比较重要的命令，但是，我觉得你还是有必要去看看所有的参数。&lt;/p&gt;

&lt;p&gt;正如你所看到的，使用这些简单的命令，就可以获取应用程序的一些细节信息，但它只是只读的，而你不能改变任何东西的apk文件。
在这篇文章中，我原本打算提过一下** dex2jar **以及如何使用它来反编译Android应用程序，但现在看有很多信息需要整理消化，所以这是顺延到下一个&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-3/&quot;&gt;博客&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/01/17/Android-Reverse-Engineering-101-Part-2/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/17/Android-Reverse-Engineering-101-Part-2/</guid>
        
        <category>Android</category>
        
        <category>逆向工程</category>
        
        
      </item>
    
      <item>
        <title>Android逆向工程101 – Part 1</title>
        <description>&lt;p&gt;这篇文章是关于android应用逆向系列的第一片文章。&lt;/p&gt;

&lt;p&gt;在这个系列里，我将讲解以下内容：&lt;strong&gt;APK&lt;/strong&gt;、&lt;strong&gt;AAR&lt;/strong&gt;的文件格式，一些常用的逆向工程和检测工具，&lt;strong&gt;dex2jar&lt;/strong&gt;、 &lt;strong&gt;AAPT&lt;/strong&gt;、&lt;strong&gt;androguard&lt;/strong&gt;和 &lt;strong&gt;apktool&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-1/&quot;&gt;Part 1 – APK and AAR format&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-2/&quot;&gt;Part 2 – aapt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-3/&quot;&gt;Part 3 – dex2jar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-4/&quot;&gt;Part 4 – apktool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.fasteque.com/android-reverse-engineering-101-part-5/&quot;&gt;Part 5 – Androguard&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;只有黑客使用吗&quot;&gt;只有黑客使用吗？&lt;/h2&gt;

&lt;p&gt;很明显，答案是否定的。&lt;/p&gt;

&lt;p&gt;如果你是一名开发者，在很多情况下，你需要hack应用或者向其中注入代码。&lt;/p&gt;

&lt;p&gt;首先，应用中有一些你感兴趣的布局或者动画效果，使用这些工具你可以拿到对应的XML资源文件。&lt;/p&gt;

&lt;p&gt;其次，你可以看看本人的应用是如何实现具体的业务逻辑的：这并不是抄袭他人的代码，而是通过学习可以可以提高你的编码水平或者得到一些有用的改进提示。&lt;/p&gt;

&lt;p&gt;最后但并非最不重要的一点，它可以检查你的应用程序是否安全可靠，可以检查代码或资源被有效地混淆，或是不需要的文件没有被包装到最终apk。你会惊讶，别人可以知道居然有这么多的信息，例如API密钥信息，认证令牌或闲置资源等。&lt;/p&gt;

&lt;p&gt;##APK 格式&lt;/p&gt;

&lt;p&gt;你开发的应用将被打包成&lt;strong&gt;APK&lt;/strong&gt;文件，你可以从谷歌获得Play商店或其他渠道找到它。换句话说，对于手机上的任何一个应用程序，有相应的APK文件（包括预装的应用程序也不例外）。&lt;/p&gt;

&lt;p&gt;apk文件实际上也是一个zip文件，所以你拿到它以后，可以将其重命名，然后解压得到里面的文件。&lt;/p&gt;

&lt;p&gt;|条目 |	说明|
|—-|—|
|AndroidManifest.xml |  manifest的二进制文件|
|classes.dex|程序的代码将被编译成dex文件|
|resources.arsc	file|包含预编译的程序资源，二进制的xml格式|
|res/|文件夹中包括未被编译打包进入resources.arsc的资源|
|assets/	|可选的文件夹，包含应用的assets文件，由AssetManager进行检索|
|lib/|可选的文件夹,包含已编译的代码，例如jni的libraray|	
|META-INF/|文件夹中包含MANIFEST.MF 文件，APK的签名文件也在这个文件夹中|
&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-10-at-22.00.18.png&quot; alt=&quot;&quot; /&gt;
APK里的文件&lt;/p&gt;

&lt;p&gt;##什么是DEX?&lt;/p&gt;

&lt;p&gt;简单讲，DEX/Dalvik执行文件是一种Android平台上的文件格式，里面包含编译好的代码，可以被Dalvik虚拟机或者&lt;a href=&quot;https://source.android.com/devices/tech/dalvik/index.html&quot;&gt;Android Runtime&lt;/a&gt; (ART)读取识别。&lt;/p&gt;

&lt;p&gt;当一个APK文件是由Android编译系统产生的（就像当你在Android Studio 上运行你的应用）。首先，Java类会被编译成&lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt;文件，后来，&lt;code class=&quot;highlighter-rouge&quot;&gt;DX &lt;/code&gt;将在这些文件转换DEX格式。 DX是Android交叉编译器&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Tools&lt;/code&gt;的一部分，你可以在以下位置找到它：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ANDROID_SDK/build-tools&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;关于DEX文件的详细信息请点击 &lt;a href=&quot;https://source.android.com/devices/tech/dalvik/dex-format.html&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;##如何得到apk文件&lt;/p&gt;

&lt;p&gt;这里有以下几种方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你想随便找一个应用，可以使用&lt;a href=&quot;https://apkpure.com/&quot;&gt;一些网站&lt;/a&gt;，通过浏览器直接下载到你的桌面&lt;/li&gt;
  &lt;li&gt;如果应用已经装在你的手机上了，你可以使用备份软件，例如&lt;a href=&quot;https://play.google.com/store/apps/details?id=mobi.infolife.appbackup&quot;&gt;这个&lt;/a&gt;，然后把他拷贝到你的手机内存或者SD卡的公共文件夹&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;/system/app&lt;/code&gt;文件夹中，你可以找到预装应用 ，例如calculator, Chrome, camera, … 这取决于你手机上的具体ROM。&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;/data/app&lt;/code&gt;中，你可以找到用户安装的应用。为了从手机中导出apk，你想要使用命令行列出可用的应用(记住使用usb连接手机):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell pm list packages -f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-23-at-19.24.57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有了apk文件的路径，你就可以将其导出了：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;adb pull -p PATH/base.apk OUTPUT.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;选项可以展示传输文件的进度，如果导出文件的名称没有制定，默认会使用&lt;code class=&quot;highlighter-rouge&quot;&gt;base。apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-23-at-19.29.46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;adb pull -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;你可能对应用如何备份你的apk感到好奇：事实上，如果用手机上安装的文件管理系统去访问&lt;code class=&quot;highlighter-rouge&quot;&gt;/data/app&lt;/code&gt;文件夹， 你会发现很多情况下是无法访问的。&lt;/p&gt;

&lt;p&gt;但是，确实是可以通过编程方式访问用户安装应用的apk文件。&lt;/p&gt;

&lt;p&gt;首先，您需要检索应用程序的列表：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final Intent mainIntent = new Intent(Intent.ACTION_MAIN, null); 
mainIntent.addCategory(Intent.CATEGORY_LAUNCHER); 
 
List&amp;lt;ResolveInfo&amp;gt; infos = getPackageManager().queryIntentActivities(mainIntent, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;resolveinfo &lt;/code&gt;，您可以访问&lt;code class=&quot;highlighter-rouge&quot;&gt;applicationinfo&lt;/code&gt;类中的&lt;code class=&quot;highlighter-rouge&quot;&gt; publicsourcedir&lt;/code&gt;字段，这是&lt;code class=&quot;highlighter-rouge&quot;&gt;SourceDir&lt;/code&gt;中公开部分的完整路径，包括资源和manifest。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;File apkFile = new File(pkgInfo.activityInfo.applicationInfo.publicSourceDir);
if(apkFile.exists()) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;##AAR 格式&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aar&lt;/strong&gt;包是一个Android Library 项目的二进制分发：例如，Android Support Library ，你可以使用此格式将其添加到你的应用程序中。另外，如果你的Android项目的发布形式是一个Library，而不是商店的应用程序，采用这种格式再好不过了。&lt;/p&gt;

&lt;p&gt;aar文件实际上也是一个zip文件，所以你拿到它以后，可以将其重命名，然后解压得到里面的文件。&lt;/p&gt;

&lt;p&gt;你可以在aar文件中找到以下内容：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;条目&lt;/th&gt;
      &lt;th&gt;必选&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AndroidManifest.xml&lt;/td&gt;
      &lt;td&gt;必须的&lt;/td&gt;
      &lt;td&gt;manifest的XML源文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;classes.jar&lt;/td&gt;
      &lt;td&gt;必须的&lt;/td&gt;
      &lt;td&gt;Java classes打出的jar文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;res/&lt;/td&gt;
      &lt;td&gt;必须的&lt;/td&gt;
      &lt;td&gt;该文件夹用于存放使用到的资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;R.txt&lt;/td&gt;
      &lt;td&gt;必须的&lt;/td&gt;
      &lt;td&gt;使用 aapt &lt;code class=&quot;highlighter-rouge&quot;&gt;--output-text-symbols&lt;/code&gt;的输出内容.它是library使用到的资源的清单 ( 包括strings, colors, dimens, attrs, layouts, …).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;assets/&lt;/td&gt;
      &lt;td&gt;可选的&lt;/td&gt;
      &lt;td&gt;存放assert资源文件的文件夹&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;libs/*.jar&lt;/td&gt;
      &lt;td&gt;可选的&lt;/td&gt;
      &lt;td&gt;该文件夹用于存放library使用到的jar文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jni//*.so&lt;/td&gt;
      &lt;td&gt;可选的&lt;/td&gt;
      &lt;td&gt;该文件夹用于存放library使用到的jni文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;proguard.txt&lt;/td&gt;
      &lt;td&gt;可选的&lt;/td&gt;
      &lt;td&gt;Proguard配置文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lint.jar&lt;/td&gt;
      &lt;td&gt;可选的&lt;/td&gt;
      &lt;td&gt;自定义Lint规则.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;http://www.fasteque.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-09-at-22.23.31.png&quot; alt=&quot;&quot; /&gt;
AppCompat-v7 23.1.0 aar 的文件内容&lt;/p&gt;

&lt;p&gt;aar和apk相比，唯一的区别是的&lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;res&lt;/code&gt;文件夹下的XML文件，他们都是普通的XML，所以你可以很容易地打开它们。&lt;/p&gt;

&lt;p&gt;请注意，例如，经常被我们作为项目依赖的Support Library是AAR的格式，您可以在以下路径找到他们：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ANDROID_SDK/extras/android/m2repository/com/android&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在本系列的其余部分，我将需要关注APK格式，因为装在手机上的应用就是这种格式的，也是这种格式分发到谷歌Play商店或其他渠道。&lt;/p&gt;

&lt;p&gt;在下一篇文章中，我将介绍&lt;strong&gt;aapt&lt;/strong&gt;和&lt;strong&gt;dex2jar&lt;/strong&gt; 两个工具，你可以使用它们通过分析从apk文件中获取很多重要的信息。&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jan 2016 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/01/07/Android-Reverse-Engineering-101-Part-1/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/07/Android-Reverse-Engineering-101-Part-1/</guid>
        
        <category>Android</category>
        
        <category>逆向工程</category>
        
        
      </item>
    
  </channel>
</rss>
